(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    523148,      11096]
NotebookOptionsPosition[    507312,      10562]
NotebookOutlinePosition[    507926,      10585]
CellTagsIndexPosition[    507819,      10580]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Jan", " ", "2016"}], "\[IndentingNewLine]", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
yzRZK8a+Zqm4Ww9rC7knbHSnn3560p7XlKrfUmby4LFHm/+cuAj8xKnfsI4S
fWjx1thWKes555wzyS8cQ1021Wpo1ibrAvft2zdpr5JOIC/QWWedVWo8NKy1
KUDrxusdhRBCCDE8sF3hy/T4OA9sVMRfdHNubIboiiY54NAg6Jo6rWjnrDuO
9Xu5e+onufV8VfoPHzOxNhbTgj3TylnlK0VfoaPIhdjEnobdFdttVV5HvmMO
wHpGnkE3dWB61uJfyCUet6lu43eEEEIIMfWgs3Lr2JqAFsA/2GQvCK7FsXW2
Pb7Hpvfxxx93Xa5+cv755xfXXnvthLJU6b9eYZ1mzt8ac88991Tm7cGPzfOl
/JS3m31BbD+46RojJIQQQowbxJ3ed999E/x1fj1b1V4YTZkzZ07RNA8wdrEm
/k30Ric5TwYJe+JdffXVE8oySP1HXVKnTY7Fx4xWrjsOPzY2vG73bGMfuqVL
l4bfkscGGy11Ym1qusYPCSGEEDMZ4jSx36AB/FqwfqzbnzdvXuPcJldeeWWj
XMazZ8+u1JT4rYk9mT9/fshP0ssaxjp61X/YM9FO5513XkFd1R3PmkrWCjY5
N/5i1ifWHUdd8uzj3Ne9wBpM8v+x/q9fucOFEEII0V+w9cX6rx8MQ/8ZxJNw
T4O0P+X0H37hTs6DVjrhhBNqfzNd9J9x9tlnS/8JIYQQI8pM1H/ENAxL/3Xq
/2VfDuk/IYQQQkwl0n/dsXjx4oI4C/+Z9N8xpP+EEEKI0UX6r39I/x1D+k8I
IYQYXQal/9iDgzjjJscSh0LuvibnrNpn1xiW/iPutpN956Cp/iPvTdN8htz/
q6++WnssdUmZ4z1J+oH0nxBCCDG6DEr/DZN+6j9yJRPTiq4jZjfeJ6VXmuq/
6Yb0nxBCCDG6SP9NBH2Hr5V8hGgz8iRSN+TKu/fee4OmWbBgQdgzmT08muxz
UoX0nxBCCCGmmpmo/8hF/OUvf7nx+kPAB/riiy8W69ata2Tj43jyHy9cuDDs
N8y+a92UFY3KusZh11m/kf4TQgghRpeZqP86hbWH3eo3IN4CvYktb9j3MipI
/wkhhBCjC/u44i9lnduwyzIMsBX2I/6B82jPs2NgQx1EXIkQQgghRK/0U/ei
o88666ywNpCcNnU02fNYCCGEEGKQYAtED2HL2rNnT8jfgm+UuNctW7aEGNhN
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
j+ixKm1uNmRbsxqD9ud72qG3m6ZAH3Isvl50JfbjWPsB9siqtuXXDXpbK8+x
H+1MCCFmAsy/rX9kntzr+Ww8yI35sf6ripEEHwOR05RGU/3n94ZlXErFvzL2
4JvGfsDfZg9Bd6H/GItzoAUpN3Gg8ZjnbXLxOrKmYBOxc1Tl8MBuVbW+scom
1Cu2jgxbV04/2LOtihVvCvfp7b85H2gT4vZg/kP82FX7CNuaVd4jazce9La3
01XF67Le1Y7DB40+z8Vp2zqFqjmc+X6ZE7Am1H+HrdGfG9ub2cir1svZXI9n
nXrG3K+dh/enrt7Nvo5Owy+APzrWft5+il20SpuiIa1PwHaqfEtCCHGMeD1e
r3GgNqbHMbVGp/rPrwHsl/5jHPDxqd7WA9jT8EHddddd5efYIepsNk3w+i+1
7rEOs5GYj7POplIFdkQ7F5q1X23K20rvueeebDtAezOW93IPhreBsVYvlTuk
Gyin6UpsvbnjzF4MqbgP2pxfo1dlV4vjOSDXVmjnft1rytbrdX4TW6u3meXW
nzKH4rq8J7my+XV3xMxXXZN3jvNRL/QJ2NFT6zeJybFzYtOsOifxMVX1IoQQ
44y3hUGv+dLMNpXLaTEK+g9snzqzX/jv8Ldh6/F2EvO3YmvppX560X9oc4t7
bFJ3VTC2en8pcbP9alPkyTNbU259JbYvjmGdYz+u6WNZmtiamsJ6RjtvlZ3S
2+tSMQb4ir1Oqyqj9/3W6Ryra9OKKf+w9/02ybVoay5oa2jRVDu0dazEfaTO
QT9isTi0+bpr8s5xLPNHzp26ZzQ9NkGOw45alRMKLBYcLZnyiQshxDjDvNyP
Nd36JA36buw6OfvLqOg/xkm/Vs/nYiaWE/+vHct4Z8f1mlOuF/2HPdJ+y/r2
Tq+NnkWH+DjQXs6XgnHWfJy5vCHUMevN0BcpP2k38MzqbFbdYBoZ/Z/TEPgk
LXddKu4DDUlbs3jonEY0vJblfcr5feOcQjlt532/uTWlvo3U+Wyx6VZpMDSj
5S0En7c6BX2C2Tux//GOpHy13p6XW29oeN9zVe4oIYQYV+hnfd7VulwPVZg/
sSon66joP7CcFWDrnBhT+duvH0OvmFZkTKmzO1TRrf7zMR/YeapyBsegP9Bi
lB0tgB0L3e9tW1Wxxp3g7aqxX90g7oXv62J/mkJMt/er9mudF35pezeq8uP4
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
kvN32OURop98/w+XBe313q23FYeHkMMZux46bvvv3VF8fvBn2etvu+5rxXd+
7deLw599FnTgW1+9qPhw5b+Z8vIKIcR045xzzulY/wE5X3fu3Nn4+E5YvXr1
yOs/1lFK/4mZzKFWGx/WtVnDd2j/gdrrf/xn//GoTv3dW4v/cfE/LdCDh2d4
vkUhhOgH7E3Qjf7bP8CxQfpPCNGEQ/v2BZsfGvB/XPS/FT/73o5i2GUSQojp
QLf6b5BI/4mZCH5M1tL9fOcPimGXZSbxvT/4euN1ij/fubP44fo/Lz5RviYh
xJgj/dcd3eg/4qe3bt06pfdDXpoXXnhhJOtw3Nj1zceDTiFGYdhlmUmw7m/P
c/+5UZ3uuOcblTElQggxLnSq/w4ePFhs37699rhemIn678CBA2G/kFWrVk3Z
/bCG6tprry0uuuiikazDceLTjz4K/slvzbsgmbNODB58w9Q/+k/2PyHEuNOp
/luzZk1x00031R7nITcemhHt2OT4Qek/ytE0TzPaaffu3dljO9F/XBcdxrHd
6r/Dhw8Xu3btCvV4uGLfA89DDz0UrnnhhRd2dU3qgBjvfue2HlTcOPXzUUtn
DeLcOdB1TeJjyUeM7vi7G36r9tjPfrS3YF1b7npV8bDxedA5xMZ2fF8Nc+dR
zqo4DfbowN+du5+q8zYtd3gGDWI+zPb37V++ptF5ea5VMTA8h89/8pPG98Ve
Jj//wa7i0yluo0IIkaJT/XfXXXcVixYtqj2O3IJoHfZvs718yZPM32+99Vbl
7+v036OPPlrceuutQYcuXLiwmD9/fnHJJZcU8+bNK7ifl156KfwG3UKO6xUr
VoQ979hbLpdPmr3n0LbkQLzjjjsK4qIpd05rNdV/r7/+enHppZeWx55//vnh
njxLly7N/p664j7JMWjnOOWUU4rLLrss5ONO/Ya9iHlGJ5xwQlk+8ij6a3KP
n2Z0yyuvvFJcffXVE/biI967H35ktB/lZ/9AyshzjOsjBttpVf1yrjPPPLMs
K+WmLTfVyd3wky1vF9/59d84Gndw8T8t9r74/yavha2P78hlwrHkJs6+M626
+e6//J1wLLZCtIJ9hxYhFwrnILdxzoaIZvroqTXF1l9dUObPIz6CNXJ1dke0
DjmV3/ln/0dl3mf2VvvRn/9FyLticRfxmkb02A/+r8fC/h2hDOdfmK2jCe/V
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
GaNS6/7MblllB0q2CTeuext6aBOte/R2B3v+VTEiBr+z9cdH9eL+jsoVl9Hs
mqkYM7MLVeVztjXwzMspf2p9D2W0+U0Y39wz8PvX0XZT17B1gZDyt/CZ2cdC
G6vRMYxlvIv0gan7try/VfMKs1tDzvfr+2zqJ3Uu5oLleTKx0fTrZp8Nz6pi
zba1EbMF1a219ho/t6a+CfGcKtjZWmMGz7QuF7i96ykbM+3J5gdN3o8clqPU
5hmpHEVhv7dfvPxYO63I2evHjty6Yys/52Lcs3Uh8fqS4F9st5PUWjoIdptW
G8/Vga2VCWvsGpSb/pNyxe+KxVibFseWEY9Zfl+UKj1Uxgu0yl01H7O4AK5b
6pZWvaEjiKcIa+Fb+jHV7r1dKqUxqQu/DrtuXpjCNLNp0Kr6LddCNxgXza+B
/qXtV83r/FqiVOymt8fQt6X0oa+L2CYBNk7TVhkL0RH4y3gn8L1WxaxaP54b
K0zDePtVp/DemC8vHlNz9cU9UP54jkYZrZ03WXNVRbnuolX/3q9L32rvZcjH
lFj7EtpA2/dFn50aj3zcTW6sMfsK/YetnY6PsXgFxpBUG/bvUp2P3nR4E5u4
6RvsGNRDk33KLDYkdX5sROavreqDfNwvY4hdl2ePfcTW49Mnpt4Xbyuvm/fF
2NqDOp+aX8vXxK7j17L0Oh5av5vyf4Z1KW37Rm7u7nNNcGzONuPX9sX36OPG
UjH49Pmmd3NtzdotfSjtq0pv8H5ZzETKFsD7WGUjN8y+VuX79bakXOxMGcPL
2ruElrc2zDyFttTEfmFzX6iLDTK7W/Bh9mmPgrBmtNUuwvq3mj28gu+j/R6m
xktve6myxdbhfWe5McjPKavyRPmxoy5e2mKXaOfcZ8rPZNcN8+6EbQSbULhe
q42kNLrvp6rmPsy7wrwAXd5qT6l5n62psfwgHBe3C5sTBztURW4c1q+F97Ii
zsDsFoD+YC7HM+e94L3HBlm1ZtRsf7wjKX+mXzsS4gW6bOPetpbLgQXmm8n5
fj3WLzIHzM1FIfQB7b44N4/070luHu1ztMbjWbDptueMlJ3nj4binWsyXttz
yI0Vob+sGCOaYO9wbi2SEXyH2JJb2iustWj1m/EaeVuzHPrIHvLVet8vz5O6
YjwNdtRWn8ZYg/8iNyZ5/1Bu/DcbS87eE+Zs7fWaIa4oYYcJ66/aY3XOR+dt
uDlbOvh9x+o0i9mrOF/TPEy2XiZoxmiNaoidasdUm2bOxT9MiFdvPWPGGmwN
zIF4j9ClVTYP8+9Rp520CT+frxuz/BrGJnm/yvidCltBE8q1Ggm7Jm3V+u6q
eazXdbl1iDxL8+OH8ca9B35NIM8k9XsfM5VbF28+C9pknT/cxlr6htR9l+PJ
V6r9f2aTytnXfD4ASI1N/v5T5QltuD2v5npN4+bM5s0YWnVc6LvafX6V1u0E
axNorCY5fM3+nrq3sHayrbPoQ7rd39qv6eOZ+DW8Bu+ejzGuevad+D7K2OpW
f5ZaW+x9qSmbTFgr3K6j1Lpwv77U4ktyZbG5Y+i7W+VJ+YDM9k17C2u0ozHA
1gbafD53LR8bUzVn8TG9Znu1Prcurs3HoOTmwn4O1kvuV98P5fb2sjVn4VoN
fL9h/VJLt6K3qjSlX7+Y01c+FjM35lhdUMbYlurtCk01n8G83X6bGk8tR3Cq
fTfF2+br4v9tjS/vc8reDmaXq+sj6/C+X/pSb5eq07phrYDlJ2u9U6l3168z
yfX/pYZonYN7TsVpmo2yzv9exqhUtOFyrQn5Pir6G7D5L/US9kFsMCaYT4zf
eD+0xaHRR9l8rOqdtnGQevE+gLAGsKYc3r9Xt74nppN9cG2+yNy07rw+R2rQ
izU28Bze5hyv1QgxpG4dcZX29ba7nI4uc+Tgc4ty5Pg5ay7+yp5zbk1CWNNq
+pJYuYr5PWOZjfEpO4xfJ+TzcU2qPzeP9vb4sNd7u115bZezW9o7mXoOZf21
bS25tZEx3p5SN/fw/XaTvNyVbbOdWyHo9Eyuafolr6smxM9Gup3zYfspbbE9
7ClIeY5pkb+adB7aFXrH1hnU+X6bxAaFtunWvwUtlfATl77UVh+f6rf9uBzr
NcZwP+7n7D6GX2eU8nn5PO/0D6m6svGhzu/t8ypW9bU+vox3xn5Xlc+rfK5u
7URKi1I/Nr5aHuZe2rfv71K2EW939/OC1P17n3IqN9iEunTPOJXvrvSLtseR
3PqQMv9eYh5hbaOJ3TL321wOvZCjuqHfL4dpulTOl5iyz8z0gb7/rsqD3ATr
wxnrsTH5dWupHNieRmOEWzefy1Ht9wFLrS+k3s2HVhfbwTtifZbfyyF1vdiu
n7Jf+zGuie8qrFFgzUeindKP8w6GMa6tX3Lzb+/75Z7pW00PNtmbucwnUHGN
ZPndfL5urYP3bTaZG/nxMtg9G/oyeP4WU83fNsdHS8b6FD3tc3bl9vTjWdtc
J9d2/dq+lJ3Y99+puGc/t8ppcL+mtU7v2Pw3ZUviO/oNs6XkciOENt1+J73v
l3+pN7sPvx4/NUfx7yTvWapPY/yzuZ/PM1aFaVif84V2lno3fQxn3R4Ole24
de6gnVrvZFW9BS3fuh97n7DZmLZPPQ/KZ/qg273Mgs+z/T7mbL6Uiz7C6s4/
L2yH3mfh1/X6NpuaU/tY45xd2saq3PO1dTCxrzXky/zDZUc1cluzVWl4H08X
cock9Isfu1L60LfZqjVT3mbhdVlcR7YmzGuzEJPZ7tvrYnV9nsbUuj4/v+xH
jny/ti9lr/Oa17cf9F1sc/ZrDeriCs1G73PkeryNMzePDHl4KtqivSNVedRS
+Pl3SksFH1xrHE7p1k4w7e3bU4gXiMZAn5Mrdy9m3wj9TsIX0BTvP/Hre6xd
1tmbfXtKjf/BH9u2J+fuxa/7DHsIpNb1td9rjmuyT2zp1yNHYFQ/Pt+Ht6HQ
78f+DV8/uTWHMbZndjzXoW2h/eknTDd43YGd0ccGmO/Xr5foZK27aaSQ36Bm
vb3H+wm8fS7VznzO+yaxxd4+1cmaVcY207wh34i9H85ewLOiH2FMtnZ5NI/Y
0fUGaBG/JtTHzqfaucWW8H3OdlPODdo58eO2YzZ65pU5O6r5w7HZVK01QweY
7XRCnpVWm6S9Uz+lrZp1Fu3yhL3lnG+0XEP1lWO+X46lrGgga+N+7UFqzYPN
L1JxaWWbt/G4oe0vxNm0303L+ULZeKapPt98/L2sI+W50I64jzr9bWtdeH8n
2D+i69PH00fb/NjbYs1G1HR/WH+dOO+C5Zvi+mFNX1v7m9ZEnzCWe+1p/lyf
84V1GClboN+LI9X3+TU5tk6Td8/GAm8f8O8Q7Zx2j/azeQZlL3MJtvr4eL2p
X9uds3lYeVO55eJz2Jop2m48dpV+RudrQpeEeY6rB8stGs/zTRPH67xC3hT3
+1L/tfqz+N0PccHt/BAhb1IP43x5TpenMB4//DhsWpN2Q7+U6tttXlNn+wPT
ZpYj10O/XGqEivfC9zfxXI/xscyHmVnPmotL9rFAsQZnbs71erWxmR3A53zh
WiHWNvKBWa4Axq6UPT08J8sr0n6naKO8S53GAJc5n7960YT3xefE8PMs/t9r
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
/bn9a4QQUwd7RfJOsjdTN3tR/v/HbTfn
      "], {{0, 299}, {640, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSize->{590., Automatic},
    ImageSizeRaw->{640, 299},
    PlotRange->{{0, 640}, {0, 299}}], "\[IndentingNewLine]", 
   ButtonBox[
    RowBox[{
     RowBox[{"izr", ".", "prof", ".", "dr", ".", "Janko"}], " ", 
     "Slavi\[CHacek]"}],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL["http://www.ladisk.si/~slavic"], None},
    ButtonNote->"http://www.ladisk.si/~slavic"], "\[IndentingNewLine]", 
   ButtonBox[
    RowBox[{"Repozitorij", " ", "pypinm"}],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL["http://github.com/jankoslavic/pypinm"], None},
    ButtonNote->"http://github.com/jankoslavic/pypinm"]}]}]], "Text",
 CellChangeTimes->{{3.661395860310301*^9, 3.6613958987939043`*^9}, {
  3.661395979066207*^9, 3.661396001794959*^9}, {3.661396032457633*^9, 
  3.6613960998976107`*^9}},
 TextAlignment->Center],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Uvod v Mathematico",
 FontSlant->"Italic"]], "Title",
 CellChangeTimes->{{3.6061000670580564`*^9, 3.606100074958541*^9}, {
  3.6061001959466467`*^9, 3.6061002068224792`*^9}, {3.606111509609539*^9, 
  3.6061115158079157`*^9}}],

Cell["Licen\[CHacek]na verzija za \[SHacek]tudente FS, UNI-LJ", "Subtitle",
 CellChangeTimes->{{3.606280865717231*^9, 3.6062808798871746`*^9}, {
  3.6613986775226383`*^9, 3.6613986787785563`*^9}}],

Cell[TextData[{
 "\[CapitalSHacek]tudentje Fakultete za strojni\[SHacek]tvo, UNI-LJ imate mo\
\[ZHacek]nost pridobiti licen\[CHacek]no verzijo programa ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " na tej ",
 ButtonBox["povezavi",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.fs.uni-lj.si/studijska_dejavnost/it_podpora/programska_\
oprema_za_studente/2015071415154271/Registracija%20Mathematica/"], None},
  ButtonNote->
   "http://www.fs.uni-lj.si/studijska_dejavnost/it_podpora/programska_oprema_\
za_studente/2015071415154271/Registracija%20Mathematica/"],
 "."
}], "Text",
 CellChangeTimes->{
  3.6062809453896084`*^9, {3.6073556272116833`*^9, 3.607355633783331*^9}, {
   3.6613962253695965`*^9, 3.6613963149978642`*^9}}],

Cell[CellGroupData[{

Cell["Uporabni\[SHacek]ki vmesnik", "Subtitle",
 CellChangeTimes->{{3.6061000987168207`*^9, 3.6061001074964933`*^9}}],

Cell["\<\
Format, Palettes, Evaluation,...

pu\[SHacek]\[CHacek]ica dol -> new cell
shift+enter -> evaluate cell
klik na (+)

?Log

Mathemematica vedno posku\[SHacek]a re\[SHacek]iti splo\[SHacek]no in analiti\
\[CHacek]no (razen, \[CHacek]e definiramo druga\[CHacek]e)\
\>", "Text",
 CellChangeTimes->{
  3.6061001662014437`*^9, {3.606100210490054*^9, 3.606100240295907*^9}, {
   3.6061008470245857`*^9, 3.6061009103428173`*^9}, {3.606101275203918*^9, 
   3.606101277501583*^9}, {3.6061013517730923`*^9, 3.6061013750982804`*^9}, {
   3.6061029428107986`*^9, 3.6061029450141125`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nekatere zna\[CHacek]ilnost", "Subtitle",
 CellChangeTimes->{{3.606100396901567*^9, 3.606100409096816*^9}, {
  3.606100769281974*^9, 3.6061007784476748`*^9}}],

Cell[CellGroupData[{

Cell["Free-form input", "Subsection",
 CellChangeTimes->{{3.606100825088525*^9, 3.606100828612095*^9}, {
  3.6061010313442965`*^9, 3.6061010364635754`*^9}}],

Cell[TextData[{
 "cell se za\[CHacek]ne z \[OpenCurlyDoubleQuote]",
 StyleBox["=",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote], bolj podrobno: wolframAlpha se za\[CHacek]ne z \
\[OpenCurlyDoubleQuote]",
 StyleBox["==",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote]"
}], "Text",
 CellChangeTimes->{{3.6061010391835203`*^9, 3.606101059438413*^9}, {
   3.606103711077627*^9, 3.6061037268950424`*^9}, 3.606103763523281*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate sin(x)", Typeset`newq$$ = 
   "integrate sin(x)", Typeset`chosen$$ = "Integrate[Sin[x], x]", 
   Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{15., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{15., {3., 14.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "integrate sin(x)", 
                  Defer[
                   Integrate[
                    Sin[Global`x], Global`x]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"Sin", "[", "x", "]"}], ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"Sin", "[", "x", "]"}], ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", "x"}], "]"}]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "integrate sin(x)", 
                    Defer[
                    Integrate[
                    Sin[Global`x], Global`x]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"Sin", "[", "x", "]"}], ",", " ", "x"}], "]"}]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cos", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{{3.6061009918774195`*^9, 3.606101014457762*^9}, {
  3.606101908446023*^9, 3.606101921919198*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot x^x", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", "Plot[x^x, {x, -1, 2}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    SuperscriptBox["x", "x"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output"]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plot", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x^x, {x, -1, 2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max744$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min743$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min743$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max744$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$506694$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min743$\
506699$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max744$506700$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max744$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min743$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$506694$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min743$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min743$\
506699$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max744$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max744$\
506700$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$506686[
                    Plot[{
                    Re[Global`x^Global`x], 
                    Im[Global`x^Global`x]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][Global`x^Global`x, {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min743$$], 
                    (
                    Piecewise[{{
                    0.5 + 1.6035674514745462` Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    1.6035674514745462` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min743$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min743$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max744$$]], 
                    (
                    Piecewise[{{
                    0.5 + 1.6035674514745462` Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    1.6035674514745462` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min743$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max744$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min743$$ + 
                    Rational[3, 1000], 
                    CalculateUtilities`GraphicsUtilities`Private`max744$$]], 
                    2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, Ticks -> Automatic, ImageSize -> {300.}, 
                    AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min743$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max744$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$506686] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$506686[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$506686[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7+MfIPEZAYNJSEiIvTAmDShJ+\
d5b7DQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/xkYzSfq/X01et+SA5SW/\
g6ZE1O3Kay0KQvdNcUa2ZFOkVfHbbmpiaXcrhByXed92a91JNwfjzG3wfeFJwMPSrYZwZRvV4X0Ges\
UTXnqFix/YnYy4T4OwnffLq2dbW602PgqEMwRiqhN5si5hnCjRNewh0zZptDuKbP26Ux08F5zH9XlC\
RUP3AekcKiIWRAjimE3zrpSbqLuZlQBBQ5MJZcuLcbnuBNoqJyYhOc3zjXK6et8UFNdGemnslNav04\
6O/iQ9k7ELyHpezOzv+wsK4XOydFdU/p26A57dt4ZU8WcobpveOI21g2DHVi2w+\
bV0lT0jVsi74GVUXNFvWGuP5E6b+Rzpk2iyG8aJtGHR6ZCu8XHmL8C/\
bwsscW34m7fvWfPaOEnDZZKjk9lGSgs+\
iaKY88AJtn67OrcNj3Kn4jtEZUsEKJ7Jxlt3iuuNhBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7bMLMTgYKE\
gs8u65f9thI1qEE3Nm+9kwQZseXJ2TV2oTmIJ2rO5gk+/\
JHxa3kcqbJkPcDYeiEqpWiv4X1UZZcQUYyMJIYL2jqNZjDKqkhqGDZD0qQOAfBEJL9sh/3zT+\
crwRSta9QXcqzOHClOQ1Pol8W+\
JCKicma23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3KNe2/g=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__1_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__1_Real-valued plot"}, {}]}]}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x^x, {x, -8.5, 9.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max746$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min745$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`more$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min745$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max746$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$506760$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min745$\
506761$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max746$506762$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max746$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min745$$\
 = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$506760$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min745$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min745$\
506761$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max746$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max746$\
506762$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$506752[
                    Plot[{
                    Re[Global`x^Global`x], 
                    Im[Global`x^Global`x]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][Global`x^Global`x, {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min745$$], 
                    (Piecewise[{{
                    0.5 + 9.621404708847276 Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    9.621404708847276 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min745$$], \
-8.5], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min745$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max746$$]], 
                    (
                    Piecewise[{{
                    0.5 + 9.621404708847276 Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    9.621404708847276 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min745$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max746$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min745$$ + 
                    0.018000000000000002`, 
                    CalculateUtilities`GraphicsUtilities`Private`max746$$]], 
                    9.5]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, Ticks -> Automatic, ImageSize -> {300.}, 
                    AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min745$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max746$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$506752] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$506752[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$506752[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3mH8AyQ+\
I94GQkJCbIMxaUBJyvd68SW1cO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577noPDmWU9nu9nr5szQ\
fJabqBp/vW7MhpLgtB353kCrRmUqSX8NkNa2Iwu8DJD6Ded9Wa91JNifHn1/g+\
4UnBiYGvhnFmGOjxniL5hCW69gwVO7I/GXOZEM5+\
wsOtxy9ebr3yKBjKkBgDSuhnbRHziSIa0h4CXbFmmxPxzR83y+\
OngvMYvhcgEtB3rXekCLUwUhCO6QTfeqGJuoV5GSIoUfTcWXLi3G57gTaKiWwE0xzfOJOrJ21xicq0\
p+Z2Sc0q/fjor+\
EDGbuQvMfl7M6Ov7AwLhZ7p0X1z6kb4PlNW3glj5fyhum95UgbMewI9CKbj1pXyRNStawLfkbVOc2W\
tcZ49oSp/5EOmDaLYTxtGwZMD22FlytvEf55W3iZY8vPpH3Hms/\
eUQIumwyV3D5KWvBZFM2UB16g7dPVuXV4jJsV3zE6QypY4UQ2zrJbXHfcq8DrHSHG2o3XIB1RT4AIc\
rAu6rjdZRkzOxOiSGKBZ9f1yx4byTqUgDvb154Jyuz48oSsWpvQ7KdzdScmmXz5o+\
JWcjnVZMj7vjCQgVop+utYH2XJFXQkAyOJ8YKmXoM5rJIaEhUs+0EJEudEMIRkv+\
zHffMP5yuBVO0pVJfyLA5caU7Ck+iXBT4AkZlJc7sOHF3BbYvZRPK4Vl3E0nR+\
2qyP6X6T6cYNzYEeSkJoScIHercndHvCX9wTFnbgbknoloRuSeiWhG5J+H+XBBcx/iv9BpXLtxY="]\
]}; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output"]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__2_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__2_Real-valued plot"}, {}]}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.573", 
    "parsetiming" -> "0.245", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa61311e4de18gghh0ge5100005g9gia1637i7586g", "host" -> 
    "http://www4c.wolframalpha.com", "server" -> "39", "related" -> 
    "http://www4c.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa61321e4de18gghh0ge51000012hga174e9174dhc&s=39", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2014, 4, 10, 8, 47, 20.429678`9.06283645621365}, "Line" -> 20, 
    "SessionID" -> 23788251085071752815}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", "Plot[x^x, {x, -1, 2}]"}, Typeset`open$$ = 
   False, Typeset`newq$$ = "plot x^x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{293., {70., 28.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.6000000000000001},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-1, 2}, {0.6922006458105129, 3.9999995853517367`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.606101240495741*^9, 3.606101925327813*^9, 
  3.6613964952096376`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["plot x^x", "WolframAlphaLong",
 CellChangeTimes->{{3.6061037412734785`*^9, 3.6061037470835905`*^9}}],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "plot x^x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {30, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    SuperscriptBox["x", "x"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plot", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x^x, {x, -1, 2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4438$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4437$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4438$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5675352$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4437$\
5675353$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4438$5675354$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4438$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4437$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5675352$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4437$\
5675353$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4438$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4438$\
5675354$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$5675338[
                    Plot[{
                    Re[$CellContext`x^$CellContext`x], 
                    Im[$CellContext`x^$CellContext`x]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][$CellContext`x^$CellContext`x, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$], 
                    (
                    Piecewise[{{
                    0.5 + 1.6035674514745462` Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    1.6035674514745462` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4438$$]], 
                    (
                    Piecewise[{{
                    0.5 + 1.6035674514745462` Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    1.6035674514745462` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4438$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$ + 
                    Rational[3, 1000], 
                    CalculateUtilities`GraphicsUtilities`Private`max4438$$]], 
                    2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4437$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4438$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5675338]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5675338[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[CalculateUtilities`GraphicsUtilities`Private`lines, 
                    Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5675338[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === L\
ength[CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+\
ARKfkWArfEJidGNMGlCS8r1eckksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu97TYxEk/\
V6vp64b80GwONnC0xNjRmKWi4LH+\
2e5BKWo4Mk1fHbHmBD0HjDyA2Lnu2nMeyFnRLvzG3yfsKhgRMNXTRnVFNT0QJI8o5GqPWNJT8xPpkx\
EhNGf8Gz46vVwe2foYDCWMdEaJFfbbSHzTBIFSQ+BbhjzjhH+zR0fl8dPBWMhfC+\
AR6AeGu9EktjACE4Y5uN969Vm6h4mpgmPiYwvnSYrz1HbC5SWlKcTmOX4xsVkvWgLTGSqHDf3S27WK\
ciFfwsfiNDG5Dw2aXu2BPqFccXoOy+rf87dAM9v28JLcbqaOMxvlyFvRNMTUMt0Pm9dJ8dI1bU2+\
jlXlzVfNhrkxVOm/l86okovh/GybRgwOzY1Xq29ZfidtvAix66fi/uBMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5WfIfo9KlghROYOMt+\
sf3xqAKvN4UQazfdgHR4PQMCyMG4YsvtHk2pHmVEksgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5gs1J3oKPvyR8Wt5HKuyZD3Q64hBblW9LexPtKQy+\
OJ8IwkxAuaevXmsEpqTKS37AclSJgTThGS/jIf+\
809XKwEUnUgUV3SsTiwpTnzT6JfFvgIeKqz5o7tObq82xazCcRprbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DbQauLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__1_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__1_Real-valued plot"}, {}]}]}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[x^x, {x, -8.5, 9.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4440$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4439$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4440$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5675425$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4439$\
5675426$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4440$5675427$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4440$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4439$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5675425$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4439$\
5675426$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4440$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4440$\
5675427$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$5675411[
                    Plot[{
                    Re[$CellContext`x^$CellContext`x], 
                    Im[$CellContext`x^$CellContext`x]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][$CellContext`x^$CellContext`x, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$], 
                    (
                    Piecewise[{{
                    0.5 + 9.621404708847276 Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    9.621404708847276 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$], \
-8.5], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4440$$]], 
                    (
                    Piecewise[{{
                    0.5 + 9.621404708847276 Tan[1.5040801783846716` #], # < 
                    0}}, 0.5 + 
                    9.621404708847276 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4440$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$ + 
                    0.018000000000000002`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4440$$]], 
                    9.5]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4439$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4440$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5675411]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5675411[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5675411[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/APkPiMNNiAL0hAB2PSgJKU7/\
XiS2Ph2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozlLNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoR48+v8H3Ck4ITA18N48ww0JM9RfKMJbr2jBQ7sj+\
ZcJkQzn7C453nL3a2t156GIxlRIwBJfSztpB5poiGtIdAV6x5y4n45o8PyuOngvMYvhcgEtD3rHesC\
LUwUhCO+QTferGZuo2JGSIoUfTcaXLyHLa9QBvFxHQMsxzfOJusrbbARE215+ZOyc06Bfnwr+\
MDGbuYvMcl7c6OwLAwLhh9p2X1z7kb4Pl1W3glj1cTh/\
m94cgbMewI9DKdT1rXyTNSda2Lfs7Vec2XjQZ59pSp/\
5cOmDbLYTxtGwbMDm2NV2tvGX67LbzMsevn4r5rzWfvKAFXDYdKcB8lLfg8imbKAy/\
R9unq3Do8xq2K7xidIRWscCIbZ9kvrj/uV+D1phBj7SYbkI6oZ0AEOVgXddzusikzw4wokljg+\
XX9ssnGsg4l4M72tWeCMjvAPCHrlic0++lC3YlJsi9/VNxKLqeaDHnfFwamoNaK/\
gbWR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/tx3/\
zDxUogVXsK1aU8iwNXmpPwJPplgQ9ATE3W3LEDR1dw22I2kTyuVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AS3kuL4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "statelist", {
          "count" -> "2", "value" -> "Complex-valued plot", "delimiters" -> 
           ""}, {
           XMLElement[
           "state", {
            "name" -> "Complex-valued plot", "input" -> 
             "Plot__2_Complex-valued plot"}, {}], 
           XMLElement[
           "state", {
            "name" -> "Real-valued plot", "input" -> 
             "Plot__2_Real-valued plot"}, {}]}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.681", 
    "parsetiming" -> "0.305", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa8401chb699908f1fihc0000153beafb588hhg76", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "24", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa8411chb699908f1fihc00001d156e5i9ggf53f5&s=24", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2016, 1, 10, 7, 35, 0.3047125`7.236465259495768}, "Line" -> 3, 
    "SessionID" -> 28319349809188355589}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "plot x^x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1368., {529., 537.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print",
 CellMargins->{{20, 10}, {Inherited, Inherited}},
 CellChangeTimes->{3.6613965004908657`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " input"
}], "Subsection",
 CellChangeTimes->{{3.6061010718862734`*^9, 3.606101075808054*^9}}],

Cell[TextData[{
 "Vse funkcije z ",
 StyleBox["veliko in z oglatimi oklepaji",
  FontWeight->"Bold"],
 "; ni presledkov so pa velike za\[CHacek]etnice (npr. TrigExpand, \
LogPlot,...)"
}], "Text",
 CellChangeTimes->{{3.6061011049432344`*^9, 3.606101151615286*^9}, {
  3.6061029873840203`*^9, 3.606102992766824*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.6061010783238635`*^9, 3.606101098651005*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"Cos", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.6061010996504793`*^9, 3.606101929326771*^9, 
  3.66139658771315*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Poljubna natan\[CHacek]nost", "Subsection",
 CellChangeTimes->{{3.6061007847623987`*^9, 3.606100791393645*^9}}],

Cell[CellGroupData[{

Cell[BoxData["Pi"], "Input",
 CellChangeTimes->{{3.606100794358973*^9, 3.6061007972160053`*^9}}],

Cell[BoxData["\[Pi]"], "Output",
 CellChangeTimes->{{3.6061007950574727`*^9, 3.6061007976903477`*^9}, 
   3.6061019309479094`*^9, 3.661396591219208*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "[", "Pi", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"komentar", ":", " ", 
    RowBox[{"N", " ", "pods", " ", "numeri\[CHacek]no", " ", "vrednost"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.6061008022300234`*^9, 3.606100813999293*^9}, {
   3.6061015446329403`*^9, 3.6061015462671337`*^9}, 3.6061015801445103`*^9}],

Cell[BoxData["3.141592653589793`"], "Output",
 CellChangeTimes->{{3.6061008049645205`*^9, 3.606100816815737*^9}, 
   3.606101932435983*^9, 3.6613965931351776`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "N"}]], "Input",
 CellChangeTimes->{{3.606101595530361*^9, 3.606101596462002*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\\!\\(\\*RowBox[{\\\"N\\\", \\\"[\\\", StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\"]\\\"}]\\) gives the numerical value of \\!\\(\\*StyleBox[\\\
\"expr\\\", \\\"TI\\\"]\\). \\n\\!\\(\\*RowBox[{\\\"N\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \\\
\"TI\\\"]}], \\\"]\\\"}]\\) attempts to give a result with \\!\\(\\*StyleBox[\
\\\"n\\\", \\\"TI\\\"]\\)\[Hyphen]digit precision. \"\>", "MSG"], 
  "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/N"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.661396597766536*^9},
 CellTags->"Info-b521dcfc-9df4-4393-b202-c38112e4badc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Pi", ",", "30"}], "]"}]], "Input",
 CellChangeTimes->{{3.6061008195811996`*^9, 3.606100820216667*^9}}],

Cell[BoxData["3.1415926535897932384626433832795028841971693993751058151208`30.\
"], "Output",
 CellChangeTimes->{3.606100820634948*^9, 3.606101934933744*^9, 
  3.6613966012363067`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Velika \[SHacek]tevila", "Subsection",
 CellChangeTimes->{{3.6061014417569532`*^9, 3.6061014436142783`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "^", "200"}]], "Input",
 CellChangeTimes->{{3.6061013912174983`*^9, 3.6061013942042336`*^9}, {
  3.6061032028645144`*^9, 3.606103223627853*^9}}],

Cell[BoxData["1606938044258990275541962092341162602522202993782792835301376"],\
 "Output",
 CellChangeTimes->{
  3.606102012582222*^9, {3.6061032034419365`*^9, 3.6061032241302094`*^9}, 
   3.6613966027926493`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"%", 
  RowBox[{"(*", 
   RowBox[{"zadnji", " ", "rezultat"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"%%", 
  RowBox[{"(*", 
   RowBox[{"predzadnji", " ", "rezultat", " ", "itd"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"%1", 
  RowBox[{"(*", 
   RowBox[{"rezultat", " ", "pod", " ", "out", " ", "1"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.606101647003051*^9, 3.6061016564949975`*^9}, {
  3.6061018629561987`*^9, 3.6061018921214314`*^9}, {3.606101978137149*^9, 
  3.606101978786663*^9}}],

Cell[BoxData["1606938044258990275541962092341162602522202993782792835301376"],\
 "Output",
 CellChangeTimes->{3.606101647546459*^9, 3.606101894117852*^9, 
  3.6061019385373273`*^9, 3.606101979458087*^9, 3.6061020137840953`*^9, 
  3.6061032311131754`*^9, 3.6613966056768584`*^9}],

Cell[BoxData["1606938044258990275541962092341162602522202993782792835301376"],\
 "Output",
 CellChangeTimes->{3.606101647546459*^9, 3.606101894117852*^9, 
  3.6061019385373273`*^9, 3.606101979458087*^9, 3.6061020137840953`*^9, 
  3.6061032311131754`*^9, 3.661396605678877*^9}],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["x", "2"], "2"]], "Output",
 CellChangeTimes->{3.606101647546459*^9, 3.606101894117852*^9, 
  3.6061019385373273`*^9, 3.606101979458087*^9, 3.6061020137840953`*^9, 
  3.6061032311131754`*^9, 3.661396605680859*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%%", "//", "N", 
  RowBox[{"(*", 
   RowBox[{
   "nekatere", " ", "funkcije", " ", "imajo", " ", "kratke", " ", "oblike"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.6061014469035997`*^9, 3.6061014827490993`*^9}, {
   3.6061015564103155`*^9, 3.6061016334799185`*^9}, 3.6061019937898693`*^9}],

Cell[BoxData["1.6069380442589903`*^60"], "Output",
 CellChangeTimes->{
  3.6061014502519803`*^9, {3.606101634033279*^9, 3.6061016375933666`*^9}, {
   3.606101985673519*^9, 3.606102017679866*^9}, 3.606103234833661*^9, 
   3.6613966139370317`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Enakosti in prirejanje vrednosti", "Subtitle",
 CellChangeTimes->{{3.606103266258514*^9, 3.60610327289515*^9}}],

Cell[CellGroupData[{

Cell["Razlika med = in :=", "Subsection",
 CellChangeTimes->{{3.606103538855541*^9, 3.606103543108405*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "=", "1", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"prirejanje", " ", "vrednost"}], " ", "-", " ", 
    RowBox[{"se", " ", "tudi", " ", "takoj", " ", "izvede"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.606103278814931*^9, 3.606103398221689*^9}, {
  3.606103480605928*^9, 3.6061034851224194`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.606103361961579*^9, 3.606103398600938*^9}, 
   3.606103487615136*^9, 3.6613966227553444`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"b", ":=", 
  RowBox[{"2", " ", "a", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"delayed", " ", 
      RowBox[{"evaluation", ":", " ", 
       RowBox[{"izvede", " ", "se", " ", "\[SHacek]ele"}]}]}], ",", " ", 
     RowBox[{"ko", " ", "se", " ", "kli\[CHacek]e"}]}], "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.606103437272436*^9, 3.606103467782658*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"a", "+", "b"}]}]], "Input",
 CellChangeTimes->{{3.606103405980184*^9, 3.6061034127199836`*^9}, {
  3.6061034625469413`*^9, 3.6061034748536944`*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.6061034129251223`*^9, 3.6061034896922364`*^9}, 
   3.661396625486438*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"a", "=", "2"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"podpi\[CHacek]je", " ", "prepre\[CHacek]i", " ", "prikaz"}], 
   "*)"}]}], "\[IndentingNewLine]", "c"}], "Input",
 CellChangeTimes->{{3.6061034908570476`*^9, 3.6061035104997697`*^9}}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.6061035111192274`*^9, 3.6613966475501204`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["b"], "Input",
 CellChangeTimes->{3.606103521648301*^9}],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.606103521835452*^9, 3.6613966523972216`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Brisanje prirejanja", "Subsection",
 CellChangeTimes->{{3.6061072631637316`*^9, 3.6061072737916756`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["c"], "Input",
 CellChangeTimes->{3.6061072805544815`*^9}],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.606107281242992*^9, 3.661396655081974*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"c", "=."}]], "Input",
 CellChangeTimes->{{3.6061072817573566`*^9, 3.6061072854069347`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["c"], "Input",
 CellChangeTimes->{3.606107286693863*^9}],

Cell[BoxData["c"], "Output",
 CellChangeTimes->{3.6061072870421143`*^9, 3.6613966599817643`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Enakost ==", "Subsection",
 CellChangeTimes->{{3.6061035569689193`*^9, 3.606103559701863*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"5", "\[Equal]", "5"}]], "Input",
 CellChangeTimes->{{3.6061035650591707`*^9, 3.6061035663933764`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.6061035667698812`*^9, 3.6613966616259546`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sqrt", "[", 
   SuperscriptBox["x", "2"], "]"}], "\[Equal]", "x"}]], "Input",
 CellChangeTimes->{{3.6061035702324114`*^9, 3.606103591168972*^9}}],

Cell[BoxData[
 RowBox[{
  SqrtBox[
   SuperscriptBox["x", "2"]], "\[Equal]", "x"}]], "Output",
 CellChangeTimes->{{3.6061035819974194`*^9, 3.606103591796386*^9}, 
   3.6613966635435443`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enacba", "=", 
  RowBox[{
   RowBox[{"Sqrt", "[", 
    SuperscriptBox["x", "2"], "]"}], "\[Equal]", "x"}]}]], "Input",
 CellChangeTimes->{{3.6061036015913715`*^9, 3.6061036047636075`*^9}}],

Cell[BoxData[
 RowBox[{
  SqrtBox[
   SuperscriptBox["x", "2"]], "\[Equal]", "x"}]], "Output",
 CellChangeTimes->{3.6061036058703938`*^9, 3.66139666562614*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"enacba", ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"x", ">", "0"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6061036076836905`*^9, 3.6061036294323034`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.6061036130090084`*^9, 3.606103629981704*^9}, 
   3.6613966687788687`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"True", "===", "True"}]], "Input",
 CellChangeTimes->{{3.606103774147753*^9, 3.606103785550068*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.606103781503186*^9, 3.6061037863336425`*^9}, 
   3.661396678066744*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Enakost izrazov ===", "Subsection",
 CellChangeTimes->{{3.6061038251771107`*^9, 3.6061038295264807`*^9}, {
  3.6061038631951632`*^9, 3.60610386443802*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sqrt", "[", 
     SuperscriptBox["x", "2"], "]"}], "===", "x"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"x", ">", "0"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.606103846198903*^9, 3.6061038514166045`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.6061038520590563`*^9, 3.6613966815699434`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"x", "===", "x"}], ",", 
   RowBox[{"Assumptions", "\[Rule]", 
    RowBox[{"x", ">", "0"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6061038585717163`*^9, 3.6061038607013597`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.606103860956558*^9, 3.6613966846426105`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pravila in zamenjave", "Subtitle",
 CellChangeTimes->{{3.6061043596499023`*^9, 3.606104363970395*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"zamenjaj", "=", 
  RowBox[{"\[Omega]", "\[Rule]", "1", " ", 
   RowBox[{"(*", 
    RowBox[{"priredi", " ", "zamenjavo"}], "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.6061043913353586`*^9, 3.6061045435090528`*^9}, {
  3.606104586408537*^9, 3.606104601305173*^9}}],

Cell[BoxData[
 RowBox[{"\[Omega]", "\[Rule]", "1"}]], "Output",
 CellChangeTimes->{3.661396697493657*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\[Omega]", "\[Rule]", "1"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"\[Omega]", ":>", 
    RowBox[{"1", " ", "zakasnjena", " ", "zamenjava"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.606104688895725*^9, 3.606104729023776*^9}}],

Cell[BoxData[
 RowBox[{"\[Omega]", "\[Rule]", "1"}]], "Output",
 CellChangeTimes->{3.661396699216235*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["\[Omega]"], "Input",
 CellChangeTimes->{{3.6061045004793215`*^9, 3.6061045023696747`*^9}, {
  3.606104607071596*^9, 3.6061046073958225`*^9}}],

Cell[BoxData["\[Omega]"], "Output",
 CellChangeTimes->{3.606104502587823*^9, 3.6061046078141365`*^9, 
  3.606104730616945*^9, 3.661396702099535*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Replace", "[", 
   RowBox[{"\[Omega]", ",", "zamenjaj"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"ReplaceAll", " ", "-", " ", 
    RowBox[{
    "zamenjuje", " ", "dokler", " ", "se", " ", "ena\[CHacek]ba", " ", 
     "\[SHacek]e", " ", "spreminja"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.6061046086360226`*^9, 3.606104618251251*^9}, {
  3.606104754629696*^9, 3.6061047703245573`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.606104618761614*^9, 3.606104731535579*^9, 
  3.6613967040922136`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Omega]", "/.", "zamenjaj", " ", 
  RowBox[{"(*", 
   RowBox[{"kratka", " ", "oblika", " ", "ReplaceAll"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.6061046215595026`*^9, 3.6061046517020063`*^9}, {
  3.606105417852212*^9, 3.60610542115359*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.606104632474465*^9, 3.606104732195049*^9, 
  3.6613967114919124`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Patterns / vzorci", "Subtitle",
 CellChangeTimes->{{3.6061054425186024`*^9, 3.6061054613874407`*^9}}],

Cell["\<\
_ kateri koli izraz

Ne bomo obravnavali:
_ _ katera koli sekvenca izrazov
_ _ _ ni\[CHacek] ali ve\[CHacek] argumentov

x_ kateri koli izraz imenovan x

Ne bomo obravnavali:
x_h kateri koli izraz imenovan x z Head[x]==h\
\>", "Text",
 CellChangeTimes->{{3.6061054738222814`*^9, 3.606105594734315*^9}, {
  3.6061056729895935`*^9, 3.606105716197878*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Head", "[", "1", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Head", "[", "x", "]"}]}], "Input",
 CellChangeTimes->{{3.6061056648047667`*^9, 3.606105681527299*^9}, {
  3.6061057213855605`*^9, 3.606105723951413*^9}}],

Cell[BoxData["Integer"], "Output",
 CellChangeTimes->{{3.6061056678101034`*^9, 3.60610568198081*^9}, 
   3.606105724453758*^9, 3.6613967566367264`*^9}],

Cell[BoxData["Symbol"], "Output",
 CellChangeTimes->{{3.6061056678101034`*^9, 3.60610568198081*^9}, 
   3.606105724453758*^9, 3.661396756639732*^9}]
}, Open  ]],

Cell["Preprosta funkcija", "Text",
 CellChangeTimes->{{3.606105902847207*^9, 3.606105905620981*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   SuperscriptBox["2", "x"]}]}]], "Input",
 CellChangeTimes->{{3.606105763934965*^9, 3.60610579276886*^9}, {
  3.6061061226726437`*^9, 3.606106128704933*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.6061058245943804`*^9, 3.6061058270396743`*^9}}],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{3.606105827253838*^9, 3.606106130018858*^9, 
  3.6613967677526655`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "k", "]"}]], "Input",
 CellChangeTimes->{{3.6061061800114965`*^9, 3.6061061831367173`*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["2", "k"], "+", 
  SuperscriptBox["k", "2"]}]], "Output",
 CellChangeTimes->{3.606106183679096*^9, 3.661396769873674*^9}]
}, Open  ]],

Cell["Tako funkcij ne definiramo", "Text",
 CellChangeTimes->{{3.606105908941337*^9, 3.606105926440733*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "[", "x", "]"}], ":=", "x"}]], "Input",
 CellChangeTimes->{{3.606105778957292*^9, 3.60610581571109*^9}, 
   3.6061058478228345`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.6061058214724236`*^9, 3.606105860889966*^9}}],

Cell[BoxData[
 RowBox[{"h", "[", "4", "]"}]], "Output",
 CellChangeTimes->{{3.6061058305878396`*^9, 3.6061058611761775`*^9}, 
   3.606105932214861*^9, 3.606106133524358*^9, 3.661396779429158*^9}]
}, Open  ]],

Cell["\<\
Funkcija ve\[CHacek] spremenljivk z neobvezno spremenljivko privzete vrednosti\
\>", "Text",
 CellChangeTimes->{{3.6061059340681686`*^9, 3.6061059433256598`*^9}, {
  3.606105979414315*^9, 3.60610600295233*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a_", ",", "b_", ",", 
    RowBox[{"c_:", "5"}]}], "]"}], ":=", 
  RowBox[{"a", "+", "b", "+", "c"}]}]], "Input",
 CellChangeTimes->{{3.606105946297318*^9, 3.6061059670732117`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"1", ",", "2", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.6061059686858816`*^9, 3.60610597660594*^9}}],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{{3.606105972332841*^9, 3.606106005638208*^9}, 
   3.6061061359640903`*^9, 3.6613967992795763`*^9}]
}, Open  ]],

Cell["Uporaba zamenjav", "Text",
 CellChangeTimes->{{3.6061060403770475`*^9, 3.6061060427497654`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "k", "]"}]], "Input",
 CellChangeTimes->{{3.6061061608159237`*^9, 3.606106164924198*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["2", "k"], "+", 
  SuperscriptBox["k", "2"]}]], "Output",
 CellChangeTimes->{{3.6061061654315305`*^9, 3.6061061892736917`*^9}, 
   3.661396802239904*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "k", "]"}], "/.", 
  RowBox[{"x", "\[Rule]", "4"}]}]], "Input",
 CellChangeTimes->{{3.6061060346875277`*^9, 3.60610606317587*^9}, {
  3.6061061451117873`*^9, 3.606106219540786*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["2", "k"], "+", 
  SuperscriptBox["k", "2"]}]], "Output",
 CellChangeTimes->{{3.606106036804971*^9, 3.6061060564150305`*^9}, {
   3.606106137621271*^9, 3.6061061534587092`*^9}, {3.606106193240513*^9, 
   3.6061062198069496`*^9}, 3.6613968081749835`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "k", "]"}], "/.", 
  RowBox[{"k", "\[Rule]", "4"}]}]], "Input",
 CellChangeTimes->{{3.606106210252207*^9, 3.6061062142169075`*^9}}],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{{3.606106214436062*^9, 3.606106220866707*^9}, 
   3.6613968432645407`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "k", "]"}], "/.", 
  RowBox[{
   SuperscriptBox["k", "2"], "\[Rule]", "0"}]}]], "Input",
 CellChangeTimes->{{3.606106225748176*^9, 3.606106231444292*^9}}],

Cell[BoxData[
 SuperscriptBox["2", "k"]], "Output",
 CellChangeTimes->{3.6061062318924007`*^9, 3.6613968460178885`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Seznami", "Subtitle",
 CellChangeTimes->{{3.606107059227518*^9, 3.606107079756281*^9}}],

Cell["Preprosti seznam", "Text",
 CellChangeTimes->{{3.6061072028080554`*^9, 3.606107206918998*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"seznam", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "4"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.606107208798266*^9, 3.6061072148555927`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.6061072154620223`*^9, 3.6613968499826384`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"a", "=."}], "\[IndentingNewLine]", 
 RowBox[{"b", "=."}]}], "Input",
 CellChangeTimes->{{3.606107305115315*^9, 3.6061073132362194`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"podatki", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[Rule]", "1"}], ",", 
    RowBox[{"b", "\[Rule]", "2"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.606107219132614*^9, 3.6061072298392954`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6061072305047555`*^9, 3.606107314832336*^9, 
  3.661396855109485*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"a", ",", "b"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"5", "+", "a", "+", "b"}]], "Output",
 CellChangeTimes->{3.6061073311910143`*^9, 3.661396856511645*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b"}], "]"}], "/.", "podatki"}]], "Input",
 CellChangeTimes->{{3.6061072333732157`*^9, 3.6061072390967107`*^9}, {
  3.606107321620163*^9, 3.6061073254048734`*^9}}],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{
  3.6061072397231426`*^9, {3.6061073175632973`*^9, 3.606107332989874*^9}, 
   3.66139685791777*^9}]
}, Open  ]],

Cell["Seznam vrednosti", "Text",
 CellChangeTimes->{{3.606107344115766*^9, 3.606107355148691*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"f", "[", "i", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.606107098621522*^9, 3.6061071411534524`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "8", ",", "17", ",", "32", ",", "57", ",", "100", ",", "177", ",",
    "320", ",", "593", ",", "1124"}], "}"}]], "Output",
 CellChangeTimes->{{3.606107112445946*^9, 3.6061071444177933`*^9}, {
   3.606107356815897*^9, 3.606107363368534*^9}, 3.661396860882264*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"f", "[", 
     RowBox[{"x", "+", "i"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6061071474379215`*^9, 3.6061071483245516`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"1", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"2", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"2", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"3", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"3", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"4", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"4", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"5", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"5", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"6", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"6", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"7", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"7", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"8", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"8", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"9", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"9", "+", "x"}], ")"}], "2"]}], ",", 
   RowBox[{
    SuperscriptBox["2", 
     RowBox[{"10", "+", "x"}]], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"10", "+", "x"}], ")"}], "2"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.606107148798908*^9, 3.606107357773575*^9, 
  3.661396863325326*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"prvi", " ", "element"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.6061071588452845`*^9, 3.6061071745123672`*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["2", 
   RowBox[{"1", "+", "x"}]], "+", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "+", "x"}], ")"}], "2"]}]], "Output",
 CellChangeTimes->{3.6061071671434793`*^9, 3.606107359606862*^9, 
  3.661396866319723*^9, 3.6613971925703173`*^9}]
}, Open  ]],

Cell["Seznam seznama", "Text",
 CellChangeTimes->{{3.6061073940889606`*^9, 3.606107397001461*^9}, {
  3.6613973877949324`*^9, 3.6613973886196175`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"f", "[", "i", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.606107369151679*^9, 3.6061073767610903`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "32"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "57"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "100"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "177"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "320"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "593"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "1124"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6061073773715086`*^9, 3.661397390169798*^9}]
}, Open  ]],

Cell["Vzami od za\[CHacek]etka do konca vsakega drugega:", "Text",
 CellChangeTimes->{{3.661397427822212*^9, 3.6613974498551626`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"data", ",", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", " ", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.661397402755887*^9, 3.6613974247845974`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "17"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "57"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "177"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "593"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.661397414424324*^9, 3.6613974515646152`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "data", "]"}]], "Input",
 CellChangeTimes->{{3.6061073843734818`*^9, 3.60610738981433*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "3"},
     {"2", "8"},
     {"3", "17"},
     {"4", "32"},
     {"5", "57"},
     {"6", "100"},
     {"7", "177"},
     {"8", "320"},
     {"9", "593"},
     {"10", "1124"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.6061073900525255`*^9, 3.606107405546792*^9}, 
   3.6613974532411413`*^9}]
}, Open  ]],

Cell["Vnos matrike", "Text",
 CellChangeTimes->{{3.606107412450429*^9, 3.6061074172475758`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M", "=", 
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"}
    }], "\[NoBreak]", ")"}]}]], "Input",
 CellChangeTimes->{{3.6061074183413105`*^9, 3.6061074451654253`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.606107446139124*^9, 3.661397459693634*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "M", "]"}]], "Input",
 CellChangeTimes->{{3.606107450039891*^9, 3.606107454096125*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0"},
     {"0", "1", "0"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.606107454602482*^9, 3.6613974621091366`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", "M", "]"}]], "Input",
 CellChangeTimes->{{3.6061074553850355`*^9, 3.606107462020984*^9}}],

Cell["\<\
\\left(
\\begin{array}{ccc}
 1 & 0 & 0 \\\\
 0 & 1 & 0 \\\\
 0 & 0 & 1 \\\\
\\end{array}
\\right)\
\>", "Output",
 CellChangeTimes->{3.606107462441264*^9, 3.6613974664585543`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nekatere pogosto uporabljene funkcije", "Subtitle",
 CellChangeTimes->{{3.6061030267777104`*^9, 3.6061030427004786`*^9}}],

Cell[CellGroupData[{

Cell["Integriranje in odvajanje", "Subsection",
 CellChangeTimes->{{3.606107636936472*^9, 3.6061076462587967`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{"x", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.606107608883432*^9, 3.6061076161764956`*^9}}],

Cell[BoxData[
 FractionBox[
  SuperscriptBox["x", "2"], "2"]], "Output",
 CellChangeTimes->{{3.606107617065134*^9, 3.606107647848024*^9}, 
   3.661397471567213*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Dt", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"a", " ", "x"}], " ", "+", "b"}], ",", "x"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"totalni", " ", "odvod"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.6061076221092005`*^9, 3.6061077020107875`*^9}, {
   3.6613975105959406`*^9, 3.6613975500578985`*^9}, {3.661397607918442*^9, 
   3.661397610302705*^9}, {3.6613976434512143`*^9, 3.6613976443078227`*^9}, 
   3.661397772046196*^9}],

Cell[BoxData[
 RowBox[{"a", "+", 
  RowBox[{"x", " ", 
   RowBox[{"Dt", "[", 
    RowBox[{"a", ",", "x"}], "]"}]}], "+", 
  RowBox[{"Dt", "[", 
   RowBox[{"b", ",", "x"}], "]"}]}]], "Output",
 CellChangeTimes->{{3.6061076712215548`*^9, 3.6061077028834267`*^9}, 
   3.6613974765340357`*^9, {3.6613975137944593`*^9, 3.6613975503852034`*^9}, 
   3.6613976109907284`*^9, 3.6613976446730824`*^9, 3.661397772773763*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"a", " ", "x"}], " ", "+", "b"}], ",", "x"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"parcialni", " ", "odvod"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.6061076796490316`*^9, 3.6061076841496615`*^9}, {
   3.661397525029786*^9, 3.6613975253670406`*^9}, 3.6613979872550797`*^9}],

Cell[BoxData["a"], "Output",
 CellChangeTimes->{{3.6061076848131456`*^9, 3.6061077039580693`*^9}, 
   3.6613974840479517`*^9, {3.661397525931495*^9, 3.6613975530129304`*^9}, 
   3.661397988110778*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     SuperscriptBox["a", "x"], " ", "+", "b"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "3"}], "}"}]}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"parcialni", " ", "odvod", " ", "vi\[SHacek]je", " ", "stopnje"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.606107708162013*^9, 3.6061077249239607`*^9}, {
  3.6613979995961933`*^9, 3.661398029648658*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["a", "x"], " ", 
  SuperscriptBox[
   RowBox[{"Log", "[", "a", "]"}], "3"]}]], "Output",
 CellChangeTimes->{
  3.6061077254413276`*^9, 3.6613974977147813`*^9, {3.6613980073690643`*^9, 
   3.6613980299788833`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Uporabne funkcije", "Subsection",
 CellChangeTimes->{{3.6061077973568482`*^9, 3.6061078043064923`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "[", "t_", "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"t", "<", "5"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "t"}], ",", 
       RowBox[{"t", "\[GreaterEqual]", "5"}]}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.606107833499774*^9, 3.606107908121781*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"h", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6061079365894604`*^9, 3.6061079455188603`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGCwAmIQPbcuic0wpdsORs+LemMVrpBpD6Nv+nYVKShUwuly
90g+VoVOOO12xCHmu/xMOL22yaT5g/xKOP0wcZ3YW/mdcLo6MDvhtfxJOM35
c/bJHL1bcLrwUH3Pm6LHcFpvyeSLW9a9hNNP/TJk7lt8gNPTpdpkFyZ8htOW
RTvWM5/5BqcPX58dkK/+C04b9vyzk/D8C6fdn1ndNwhncIDRz3W3uX55wwin
q/90Gu+pYobT7IIvMkO0WOE061lWd+69bHD697m1OZMKOeD00/B1knJyXHDa
sSMv98Rabjg99d8OTud4XjgdLXPY585nPjjNc0D7jVKoAJxONV30NVJHEE6X
11UEKXxF0K2vJl8+d04ITrdcf3rq90Uk+oj5IY2rCLpp3u0NTbcRdF2Qcp/Z
CwRdtmuTxzxGYTid0XVxb64Jgk4vV946yxxBp6WUrjluhaBT7CRnKzoi6MRP
CRVXfRF0VNQHI9t0BO2jxb+CZxaCjjyRv0JzLoJOS7uwwm0Bgm5YNHFlwzIE
vUVKZPWXTQhahlty3Z3TCFpzZeW6n+cQtJn7rXVilxB0QPPs9QE3EHTLb9mN
R54g6Ikz6zY+fI6g55nf3/jvFYLeUbxgk8VHBH1UkHFz6BcEfWl94uai7wj6
vu+hzf2/EPTyB09F9vxB0ADIoJ7x
      "]], LineBox[CompressedData["
1:eJwtz11IFXYABfCbtyyiouyv05vatb80i1qzKFZRnTJIsxqV26qN5c2rSZDC
DAbDh1mQfdmXkQSJUulDZVFLretyh7Sceq/F2hpsaw/NFLWPa85yYTmj83D4
cV4OnLhtuRsyQxwOR9Jw3rl5qqsnyWkgGZrQfq1juEtOvrOy2jnaQNLtrah2
jzWQnB0SWrNkvIHkovKsmi0TDSTT/vqw9kSEgaTnu321V6IMJHMiu2rbog0k
96Wdvz7GGkj+6J/ly59jINm8o8h3aq6B5IMxz3w18w0kgysv1wUXG0jG30y8
6U02kCyqWsA1HgPJ6ekJniqvgWR9mCtkQraBZPDbN0l3c4b33su0FY1N6/OH
/7yX0b+vv/t5iYHkRcfOv9MDBpItG88O7loYDkkGcg/NckZA8uqOAvgfRkAy
NnXZJznXPoBk0tBXe8ryIyHpffDTi+ufRUFyacHuao/bBcnjub114zpdkHz0
fUVHWf0USPZk3vDeKoyGZHBn2OiAJwaSl1JaB7Nmx0KyI/vjBc7+WEi6LvxR
XBiYCsk96d+cCaS6IflqMKoo9YYbkgl1Jada4uMgOT/j9qeT9sdBkqfDI/39
cZBMYPiBdV9Og+TaUU9ifqmfBsngn+0NzTMtJHNPF03ef8RC0j8i/vnqYxaS
M7f7WsYVW0i2J3YWHD1pIbmpCcGSUgvJFS/6/JUXLCQjkrfsbWyykMyrCnr2
NltI3gsrXJLcaiF58OEP/7a2WUg68sZn3P/NQrK7lMse/WMhucr5xZRzjy0k
z2U/fZnZaSG5dZ7rUle3heSvP+dF9/ZaSCZ+NHbgap+F5OHi8vu7+i0kU74O
HBgYsJCsbMjI8r22kBw54/Xy/EELSc/hozFL31pI1vdN/29oyELyfxQp8wo=

      "]]}, {}}, {{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{0, 10}, {-9.999999795918367, 4.996811224489796}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6061079459911637`*^9, 3.6061081522627244`*^9, {3.6613980381822205`*^9, 
   3.6613980432735467`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Re\[SHacek]evanje ena\[CHacek]b", "Subtitle",
 CellChangeTimes->{{3.6061080072522078`*^9, 3.60610800975394*^9}}],

Cell[CellGroupData[{

Cell["Algebrajske ena\[CHacek]be", "Subsection",
 CellChangeTimes->{{3.606108156322601*^9, 3.606108164365611*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"x", "+", "y"}], ")"}], "2"], "]"}]], "Input",
 CellChangeTimes->{{3.606103045556531*^9, 3.606103055170434*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], "+", 
  RowBox[{"2", " ", "x", " ", "y"}], "+", 
  SuperscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{3.606103055499653*^9, 3.606107806581106*^9, 
  3.6061081680145025`*^9, 3.6613980495256624`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.6061030615569572`*^9, 3.6061030698338437`*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   RowBox[{"x", "+", "y"}], ")"}], "2"]], "Output",
 CellChangeTimes->{3.606103070053584*^9, 3.6061078075738273`*^9, 
  3.606108168816092*^9, 3.66139805080964*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{"1", "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"x", "^", "3"}], "+", "1"}], ")"}]}], ",", "x"}], "]"}], ",", 
   "x"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "x"}], ")"}]}]], "-", 
  FractionBox[
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"2", " ", "x"}]}], 
   RowBox[{"6", " ", 
    RowBox[{"(", 
     RowBox[{"1", "-", "x", "+", 
      SuperscriptBox["x", "2"]}], ")"}]}]], "+", 
  FractionBox["2", 
   RowBox[{"3", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{
       FractionBox["1", "3"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          RowBox[{"2", " ", "x"}]}], ")"}], "2"]}]}], ")"}]}]]}]], "Output",
 CellChangeTimes->{3.6061082179893045`*^9, 3.66139805186941*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{"1", "/", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"x", "^", "3"}], "+", "1"}], ")"}]}], ",", "x"}], "]"}], ",",
     "x"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6061081877520914`*^9, 3.6061082099340067`*^9}}],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{"1", "+", 
   SuperscriptBox["x", "3"]}]]], "Output",
 CellChangeTimes->{{3.6061082113740253`*^9, 3.6061082193662624`*^9}, 
   3.6613980560726385`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "+", "x"}], "\[Equal]", "1"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6061030755129766`*^9, 3.6061031087436724`*^9}, {
  3.6061031684828434`*^9, 3.6061031704452114`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        SqrtBox["5"]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SqrtBox["5"]}], ")"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.606103094980734*^9, 3.606103171091669*^9, 
  3.606107810981251*^9, 3.6061080131314106`*^9, 3.6061082228607492`*^9, 
  3.661398057160418*^9}]
}, Open  ]],

Cell["Obravnanjve re\[SHacek]itev", "Text",
 CellChangeTimes->{{3.60610802785489*^9, 3.606108050917975*^9}, {
  3.60610823142875*^9, 3.6061082320241814`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "/.", "sol"}]], "Input",
 CellChangeTimes->{{3.6061080365066977`*^9, 3.6061080421146684`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      SqrtBox["5"]}], ")"}]}], ",", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SqrtBox["5"]}], ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.606108042578416*^9, 3.6061080543045487`*^9}, 
   3.6061082331019382`*^9, 3.661398060119695*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "/.", 
  RowBox[{"sol", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.606108055907686*^9, 3.60610806132313*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "-", 
    SqrtBox["5"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.6061080618024616`*^9, 3.6061082339795623`*^9, 
  3.6613980617310457`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Iskanje ni\[CHacek]el", "Subsection",
 CellChangeTimes->{{3.6061101466832457`*^9, 3.606110152106072*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"k", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], "+", 
   RowBox[{"Exp", "[", "x", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"k", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.606110230451209*^9, 3.6061102656074243`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
fb9HQ///fxNJ4OKUVz+iof8HqEhVhw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-2, 2}, {-0.8102206121539498, 8.29835295653927}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6061102557838583`*^9, 3.606110266151814*^9}, 
   3.66139806879292*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], "+", 
     RowBox[{"Exp", "[", "x", "]"}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6061102162900543`*^9, 3.606110217742112*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"-", "0.5885327439818611`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6061102182792287`*^9, {3.606110270307276*^9, 3.606110275572606*^9}, 
   3.6613980720531387`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Diferencialne ena\[CHacek]be", "Subsection",
 CellChangeTimes->{{3.606108119250253*^9, 3.6061081236232886`*^9}}],

Cell["Brez za\[CHacek]etnih pogojev", "Text",
 CellChangeTimes->{{3.6061088922552233`*^9, 3.6061088951232643`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
     RowBox[{
      RowBox[{"y", "'"}], "[", "t", "]"}], "+", 
     RowBox[{"y", "[", "t", "]"}]}], "\[Equal]", 
    RowBox[{"a", " ", 
     RowBox[{"Sin", "[", "t", "]"}]}]}], ",", 
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.6061080740141783`*^9, 3.6061081080801682`*^9}, {
   3.606108240243764*^9, 3.606108258796886*^9}, {3.606108401152923*^9, 
   3.606108407414404*^9}, 3.606108672684679*^9, {3.6061088399474373`*^9, 
   3.6061088437571535`*^9}, {3.6061088878921227`*^9, 3.606108889374178*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}]], " ", 
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Cos", "[", 
       FractionBox[
        RowBox[{
         SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], "/", "2"}]], " ", 
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Sin", "[", 
       FractionBox[
        RowBox[{
         SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "-", 
     RowBox[{"a", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"Cos", "[", "t", "]"}], " ", 
         SuperscriptBox[
          RowBox[{"Cos", "[", 
           FractionBox[
            RowBox[{
             SqrtBox["3"], " ", "t"}], "2"], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"Cos", "[", "t", "]"}], " ", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{
             SqrtBox["3"], " ", "t"}], "2"], "]"}], "2"]}]}], ")"}]}]}]}], 
   "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.606108091513026*^9, 3.606108098796009*^9}, 
   3.606108235776605*^9, 3.606108407769627*^9, 3.6061086742217565`*^9, 
   3.6061088456144648`*^9, 3.661398077344189*^9}]
}, Open  ]],

Cell["Z za\[CHacek]etnimi pogoji", "Text",
 CellChangeTimes->{{3.60610890236791*^9, 3.6061089041197834`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eqs", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"y", "''"}], "[", "t", "]"}], "+", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "t", "]"}], "+", 
       RowBox[{"y", "[", "t", "]"}]}], "\[Equal]", 
      RowBox[{"a", " ", 
       RowBox[{"Sin", "[", "t", "]"}]}]}], ",", 
     RowBox[{
      RowBox[{"y", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"y", "'"}], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"sol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{"eqs", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.606108268738593*^9, 3.6061082769739985`*^9}, {
  3.606108396444729*^9, 3.606108570513788*^9}, {3.6061086507927074`*^9, 
  3.606108667816185*^9}, {3.606108698325914*^9, 3.6061087199723063`*^9}, {
  3.6061088301709495`*^9, 3.606108854898075*^9}, {3.6061088985015945`*^9, 
  3.6061088996214066`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "3"]}], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "t"}], "/", "2"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "3"}], " ", 
        RowBox[{"Cos", "[", 
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "-", 
       RowBox[{"3", " ", "a", " ", 
        RowBox[{"Cos", "[", 
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "+", 
       RowBox[{"3", " ", "a", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", "t", "]"}], " ", 
        SuperscriptBox[
         RowBox[{"Cos", "[", 
          FractionBox[
           RowBox[{
            SqrtBox["3"], " ", "t"}], "2"], "]"}], "2"]}], "-", 
       RowBox[{
        SqrtBox["3"], " ", 
        RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "-", 
       RowBox[{
        SqrtBox["3"], " ", "a", " ", 
        RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "+", 
       RowBox[{"3", " ", "a", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", "/", "2"}]], " ", 
        RowBox[{"Cos", "[", "t", "]"}], " ", 
        SuperscriptBox[
         RowBox[{"Sin", "[", 
          FractionBox[
           RowBox[{
            SqrtBox["3"], " ", "t"}], "2"], "]"}], "2"]}]}], ")"}]}]}], "}"}],
   "}"}]], "Output",
 CellChangeTimes->{
  3.60610844396029*^9, {3.606108484070535*^9, 3.606108564601068*^9}, {
   3.6061086597124224`*^9, 3.606108720800889*^9}, 3.606108855555552*^9, 
   3.606108906243307*^9, 3.606108975810789*^9, 3.661398086662655*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ySol", "[", "t_", "]"}], "=", 
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "/.", 
   RowBox[{"sol", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6061087014100924`*^9, 3.606108726613315*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", "3"]}], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "t"}], "/", "2"}]], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "3"}], " ", 
     RowBox[{"Cos", "[", 
      FractionBox[
       RowBox[{
        SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "-", 
    RowBox[{"3", " ", "a", " ", 
     RowBox[{"Cos", "[", 
      FractionBox[
       RowBox[{
        SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "+", 
    RowBox[{"3", " ", "a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", "/", "2"}]], " ", 
     RowBox[{"Cos", "[", "t", "]"}], " ", 
     SuperscriptBox[
      RowBox[{"Cos", "[", 
       FractionBox[
        RowBox[{
         SqrtBox["3"], " ", "t"}], "2"], "]"}], "2"]}], "-", 
    RowBox[{
     SqrtBox["3"], " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{
        SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "-", 
    RowBox[{
     SqrtBox["3"], " ", "a", " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{
        SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "+", 
    RowBox[{"3", " ", "a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", "/", "2"}]], " ", 
     RowBox[{"Cos", "[", "t", "]"}], " ", 
     SuperscriptBox[
      RowBox[{"Sin", "[", 
       FractionBox[
        RowBox[{
         SqrtBox["3"], " ", "t"}], "2"], "]"}], "2"]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.6061087276460514`*^9, 3.6061088571997037`*^9, 
  3.6061089769956307`*^9, 3.661398092146269*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"ySol", "[", "t", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.606108730692425*^9, 3.6061087479373674`*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "3"], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "t"}], "/", "2"}]], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "3"}], " ", "a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", "/", "2"}]], " ", 
     RowBox[{"Cos", "[", "t", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "a"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", " ", 
        RowBox[{"Cos", "[", 
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "t"}], "2"], "]"}]}], "+", 
       RowBox[{
        SqrtBox["3"], " ", 
        RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{
           SqrtBox["3"], " ", "t"}], "2"], "]"}]}]}], ")"}]}]}], 
   ")"}]}]], "Output",
 CellChangeTimes->{{3.6061087357886915`*^9, 3.6061087483001213`*^9}, 
   3.606108858885922*^9, 3.606108977836248*^9, 3.661398101536998*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ySol", "[", "t", "]"}], "/.", 
    RowBox[{"a", "\[Rule]", "1"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.606108756047062*^9, 3.6061088024213142`*^9}, 
   3.6061088627026267`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwUl3k8VV8Xxs0ZM2aIyhgyk1n2Ml5TJaGiTKVkKKkQIZIUSVJJyE9FhqSU
kGxDJSpjg3l2Xdx7jzIUGd773n/OZ33OPmutvc4+9/s8Mj6nnXxZmJiYqBuY
mP5/lb25+ihna73pu4p1xo9ApDMFXEF+D9H+4Dd5hisE2jeielPJ7znaJ/4x
Xu8XgdbZGh34Ut6g++Wp1YFDBHK9T+zj8MMo4buYtWMTgX6IphSv5zaiv0fU
Vp0KCcTiLa++cqMJ/R1aDx6/QiC14uqyvxGf0ffM5R9njhDo4IKjzsKJNpT7
6O9vX00CNTyc6w0v6kCPbjezKK/T0c/3plJ/crtQSRN7sXQLHbHwf8+Zu/ET
tefIEHqudCS+U3r4THwPykzBxsLidKR+KEBmNqIPHY6aO/bwJw0desT8mHpi
CHm/j1GV20dD+sfyQ3SfD6N7gvwu9Tw01LBof/tc0Qi60WjmfvgDFXVL3vv2
O3cM3SoY/fBKj4pYj6sdIG5MIt+4SLVzEjMo5W9nmPo1Csp8RHp9u2saiSeF
ZwTFT6Gltk/NFSnTSL2ssWcmYgaxGymGtXFOI7flQ4cpJwhk2/nvjrDgFAr5
GFN7W2sWHVif91TvpqDKm517dJ7PIt2WOb7k/yjIXDb8dEjRL5Qj9Vsv1JiC
Emda1gWVfiMRwfUwdV4K+vpqS+qLJ7+RG8d209ihSXSQ1Fg2mzuHTJKu1ain
TKIcAVGz1K3zKMSZ3ppzchKN9fh1aGTNo27rAN1vpEmk9Oitd5vEAvpzfp2l
S2kSnQrc+PvUvQV0BXXXZfFOole63nEbNy2ipF8tUZpzZLS0Vi5UmraIRszd
Bq/3k5HpJ45HuwX+oCcnQC3/ExnF3zqkQ7vxB3FdCw2MeENGLW4ljck8f5Hp
iZfHV5+SEb/8+n7Va39RIs2pXjabjJxp+8Y/cyyh5bhXG/tvk1FmxeNzAfFL
6Cp5Ylj8BhkNxfxh42FZRh/9K/o/JpKRvK3dnaKYZfQvUPRrRwIZ+QtlK9it
LqP4mYYKuatk9LyPeD0V8Q/1KOtSH18jo/nH5tbX/v5D+e5tMiYpZGR06s4P
pdAV9OEIimtNJ6MYfcrxT3MryPyWQCNi9POeyfjPiTOrSGrV1zCkgIy4W25c
3UCsIs2Z73TrcjLae3tYrCBwDb0meVVk15FR+mGdp9bTa2jvlgtmLm1k1KuQ
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
NO/vorZ3Lfja5pbfFl84kOU5kpt+tRWXrnDbibJJfEs56dhw2vDBrlDJtXkk
XnRzRnZ0t2M/j8Ib00UccE+5LLAt78KFtjzhUAkHsiuzIhwvdWNZ6KL1lZH3
JRpyvmv24KfSkot/VnGg0cTzsJxDL+4T3nX/8ZMDS86rfE8c6cUGFWrVuJYD
p8tUYqRIPZQTgR4mNZL1/0/07MZdAZ7nWzoa84sDZwIi3rsvJPWWg73N/d9k
vPfSJmMDhPjxXuHnG60cqPdecfLfHyFuX+uzwq+dA71rVoUc3i/C6xbNu3y+
kwOr1reGZX8U4XODj1qOd3PgiMjMcVpOjDNrV+861MsB+YM+UdJHxFgyMy2e
I+BAYP+q+4X/ibEmLdbivIgDyzf8Mrw6KsZmzcFEOEHGn3uAEmRKYCe3s/dT
/5DvScGFokw3AgfMsN9aPcgBn9IKHcVoAsfd2ds6+Jd8X27bMK/lknpZfWPQ
klEO+O/v+TSzhdSv75X0No1xYPSwqW3AIIFn7plVxZzggGB6Y+pMUk+r1wg9
3afI+4xOlV8i+XeXS83KuzO40MZfumeI1NMOozjv3UwuLPsxoX+0m8BXgl8e
r5DkgpTiNDSXEDhW+Z7sn9lciDD/8sz+FdkPvLqYJjuXCx3P7yr2XyZwyzZn
u43zubBYvqzqqSWBZ5Raz6Qv4MLe2VaPrywk8KqDmxPdFnGB12rxLLZQjKFf
3er2Yi7IzvaPl/MW40NXZIbeLOHCrd+vP4vUxfiy3HBEqQIX+q+ii5RcEY6O
/43ES7mwMt2jfretCH8x/N65QJkLesolmiN9QjzFjdSnreSCQajPCZkBAV7Z
c7X25CouZM7UvZV6TIB3eLldClXngmdnc31cfR++9GTX9yJtLlDfPfUcjuvF
kevWuQl0uLDkZbbN+4kenJmloDBflwt5xdwTR6x78MTvnkOUDVxI39R45FRL
F15+pnL2cX0uzDlsnrlOtQtvm5mZHLyJC/rBkpNveJ3YR/P2aKEJF0rO+1e3
prXjsaNGYfuAC/U+GbRbhi149M8VbMYg17fY+a0qLseDs1RWorNcuDuVb+Je
WI6eSXKStpznwqxFuRFL31YirtRtY2MPLkSGZOVq3atGGbNnWev5kPU47DQ7
3qIOXZwruKwSwIXWoXADnxO/kd48LZmlV7lwSKm6uCmsBTXPO/hILogL+Xus
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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{0, 100}, {-1.0024388970595894`, 1.0046046043212693`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6061087626233287`*^9, 3.6061088030617623`*^9}, {
   3.606108860282915*^9, 3.6061088632189856`*^9}, {3.60610898055216*^9, 
   3.60610898555472*^9}, 3.6613981031556683`*^9}]
}, Open  ]],

Cell["Numeri\[CHacek]no re\[SHacek]evanje", "Text",
 CellChangeTimes->{{3.6061088748342457`*^9, 3.6061088776959925`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"NDSolve", "[", 
   RowBox[{"eqs", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "100"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.606108928929845*^9, {3.606109012706025*^9, 3.6061090165909557`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NDSolve", "::", "nlnum"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"The function value \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"0.0001451523696443304`\\\"}], \\\",\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"0.9998548476303557`\\\"}], \\\"+\\\", RowBox[{\
\\\"0.00014515236913462275`\\\", \\\" \\\", \\\"a\\\"}]}]}], \\\"}\\\"}]\\)\
\[NoBreak] is not a list of numbers with dimensions \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"2\\\", \\\"}\\\"}]\\)\[NoBreak] at \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"t\\\", \\\",\\\", \
RowBox[{\\\"y\\\", \\\"[\\\", \\\"t\\\", \\\"]\\\"}], \\\",\\\", \
RowBox[{SuperscriptBox[\\\"y\\\", \\\"\[Prime]\\\", Rule[MultilineFunction, \
None]], \\\"[\\\", \\\"t\\\", \\\"]\\\"}]}], \\\"}\\\"}]\\)\[NoBreak] = \
\[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"0.0001451523696443304`\\\", \
\\\",\\\", \\\"1.`\\\", \\\",\\\", RowBox[{\\\"-\\\", \
\\\"0.0001451523696443304`\\\"}]}], \\\"}\\\"}]\\)\[NoBreak]. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/NDSolve\\\", ButtonNote -> \
\\\"NDSolve::nlnum\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.606109017249443*^9, 3.6613981101466737`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     TagBox[
      TemplateBox[{RowBox[{
          StyleBox[
           TagBox["InterpolatingFunction", "SummaryHead"], 
           "NonInterpretableSummary"], 
          StyleBox["[", "NonInterpretableSummary"], 
          DynamicModuleBox[{Typeset`open$$ = False}, 
           PanelBox[
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  GraphicsBox[{{}, {{{}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[2.5]], 
                    PointBox[{{0., 0.}, {0., 0.}}]}, {}}}, {}}, {
                   DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
                    PlotRange -> {{-1., 1.}, {-1., 1.}}, DisplayFunction -> 
                    Identity, AspectRatio -> 1, Axes -> {False, False}, 
                    AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Method -> {}, 
                    PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "0.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  GraphicsBox[{{}, {{{}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6], 
                    AbsolutePointSize[2.5]], 
                    PointBox[{{0., 0.}, {0., 0.}}]}, {}}}, {}}, {
                   DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, AxesOrigin -> {0, 0}, 
                    PlotRange -> {{-1., 1.}, {-1., 1.}}, DisplayFunction -> 
                    Identity, AspectRatio -> 1, Axes -> {False, False}, 
                    AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Method -> {}, 
                    PlotRange -> {{-1., 1.}, {-1., 1.}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "0.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic], 
            BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
          StyleBox["]", "NonInterpretableSummary"]}]},
       "CopyTag",
       DisplayFunction->(#& ),
       InterpretationFunction->("InterpolatingFunction[{{0., 0.}}, <>]"& )],
      False,
      Editable->False,
      SelectWithContents->True,
      Selectable->False], "[", "t", "]"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.606108930075656*^9, 3.60610898696072*^9, 
  3.6061090172504444`*^9, 3.661398110295485*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"eqs", "/.", 
  RowBox[{"a", "\[Rule]", "1", 
   RowBox[{"(*", 
    RowBox[{
    "vse", " ", "konstante", " ", "morajo", " ", "biti", " ", "definirane"}], 
    "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.6061090404145637`*^9, 3.6061090677244973`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], "+", 
     RowBox[{
      SuperscriptBox["y", "\[Prime]",
       MultilineFunction->None], "[", "t", "]"}], "+", 
     RowBox[{
      SuperscriptBox["y", "\[Prime]\[Prime]",
       MultilineFunction->None], "[", "t", "]"}]}], "\[Equal]", 
    RowBox[{"Sin", "[", "t", "]"}]}], ",", 
   RowBox[{
    RowBox[{"y", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "0", "]"}], "\[Equal]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.606109045011349*^9, 3.606109070013239*^9}, 
   3.661398120657504*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"eqs", "/.", 
     RowBox[{"a", "\[Rule]", "1"}]}], ",", 
    RowBox[{"y", "[", "t", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "100"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6061090754110804`*^9, 3.6061090796965322`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     TagBox[
      TemplateBox[{RowBox[{
          StyleBox[
           TagBox["InterpolatingFunction", "SummaryHead"], 
           "NonInterpretableSummary"], 
          StyleBox["[", "NonInterpretableSummary"], 
          DynamicModuleBox[{Typeset`open$$ = False}, 
           PanelBox[
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAAnIW2B5tvvD4ixf/////vP/BdXF00
Ffo/cUTyzFOI5j/OO7mkBi4LQBqtDZ9F0uQ/ZDHLW8wwFECYaUOmDxLev0XB
TstvqRpA93q/OIRX7L8alh9oPtcgQKZV5NhJJOI/GlLMUc4dJECrARGmQKLp
P6F7LwaTqidAEJGHwJD3579aI53txCYrQJ4p6f57BOG/nFE/PABnLkBi+J3V
wgPsP7P2yyq49jBAkMq8RPvT0z/chxLr9JsyQPyYg5o6Fu+/H1jeROg4NEBu
xBeVfzDJvyVfBQT2+DVAKCUQwOD+7z9vqcZ2CJs3QJLD3nLHVqa/fSrjTjVg
OUDg0kYnOw/vv6TqhMAYHTtAN5Woc5yE2T8P7sDlALw8QHaMDUdFrOw/PihY
cAN+PkD3adJ20Erjv9jSRFcFEUBAB2/0HrUe6L/zLAsplvRAQI9xP5foiek/
miaURwLUQUASasMTOxndP+RB6r9wpEJAMlFdRYtK7b+P+O1qbIZDQBIjq6Uj
5su/3NC+b2pZREBFL1RVYa3vP7ZIUsFDKEVAy/DSkanGuD/yW5NFqghGQNsm
qmgl4u+/0JChIxPaRkCfw2nWuzTDPxBhXTQJvUdAvi/Z1QIH7j/c0NuR2ptI
QDHxRMRj9t+/SmInSa5rSUBGxm3DNtfqvxqPIDMPTUpAglxL8a0t5j+M3eZ2
ch9LQCEwykZbZOU/i8tvB7HtS0AnAgG9KKXov+xUpsp8zUxAvlUeOcJ437/v
/6nnSp5NQBqetc2Ww+w/VEZbN6aATkAZCVceZDTQP1uu2eADVE9ABCMABjCC
77/4Wo1rnhFQQBgMp1bnQcC/c6wEgAGCUEAzUUlCRvLvP7+OYsHl6lBAuSf/
5NwWwL+7PheckFxRQKUvwcGNQu6/fj4tHSnMUUAtNfhR3erePxLPKctCNFJA
p2w3N/Mc6z9XLX0SI6VSQNBckZP54OW/bRy3hoQOU0Dw3h/28qDlv0lbUqHT
dVNAb0VQ4gyA6D/WZ0RV6eVTQFRBdmLvs98/NAUdNoBOVEBntehDJ7/sv0Nw
TLDdv1RAYnPIrq4Z0L8YK93QKC9VQMnTWSKh4e8/vnZUHvWWVUDs9MTB//Wh
PxWQIgWIB1ZA2gJIUjOg7789OtcYnHBWQCBA3VAsc8w/FrLixXbiVkAzBuK5
VA7tP7V5Txk/UldAMMbx70hI4r8m0qKZiLpXQLwPgwpGJem/R/hMs5grWECn
nQZJOU7oPzmv3fkplVhA/UxQdtfW4j8+GeT4//9YQDmEg/cbmOu/O1fP6A==

                    "]]}}}, {
                   DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                    PlotRange -> {{0., 100.}, {-0.9963557285529662, 
                    0.9999999999983269}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "100.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                  GraphicsBox[{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAAnIW2B5tvvD4ixf/////vP/BdXF00
Ffo/cUTyzFOI5j/OO7mkBi4LQBqtDZ9F0uQ/ZDHLW8wwFECYaUOmDxLev0XB
TstvqRpA93q/OIRX7L8alh9oPtcgQKZV5NhJJOI/GlLMUc4dJECrARGmQKLp
P6F7LwaTqidAEJGHwJD3579aI53txCYrQJ4p6f57BOG/nFE/PABnLkBi+J3V
wgPsP7P2yyq49jBAkMq8RPvT0z/chxLr9JsyQPyYg5o6Fu+/H1jeROg4NEBu
xBeVfzDJvyVfBQT2+DVAKCUQwOD+7z9vqcZ2CJs3QJLD3nLHVqa/fSrjTjVg
OUDg0kYnOw/vv6TqhMAYHTtAN5Woc5yE2T8P7sDlALw8QHaMDUdFrOw/PihY
cAN+PkD3adJ20Erjv9jSRFcFEUBAB2/0HrUe6L/zLAsplvRAQI9xP5foiek/
miaURwLUQUASasMTOxndP+RB6r9wpEJAMlFdRYtK7b+P+O1qbIZDQBIjq6Uj
5su/3NC+b2pZREBFL1RVYa3vP7ZIUsFDKEVAy/DSkanGuD/yW5NFqghGQNsm
qmgl4u+/0JChIxPaRkCfw2nWuzTDPxBhXTQJvUdAvi/Z1QIH7j/c0NuR2ptI
QDHxRMRj9t+/SmInSa5rSUBGxm3DNtfqvxqPIDMPTUpAglxL8a0t5j+M3eZ2
ch9LQCEwykZbZOU/i8tvB7HtS0AnAgG9KKXov+xUpsp8zUxAvlUeOcJ437/v
/6nnSp5NQBqetc2Ww+w/VEZbN6aATkAZCVceZDTQP1uu2eADVE9ABCMABjCC
77/4Wo1rnhFQQBgMp1bnQcC/c6wEgAGCUEAzUUlCRvLvP7+OYsHl6lBAuSf/
5NwWwL+7PheckFxRQKUvwcGNQu6/fj4tHSnMUUAtNfhR3erePxLPKctCNFJA
p2w3N/Mc6z9XLX0SI6VSQNBckZP54OW/bRy3hoQOU0Dw3h/28qDlv0lbUqHT
dVNAb0VQ4gyA6D/WZ0RV6eVTQFRBdmLvs98/NAUdNoBOVEBntehDJ7/sv0Nw
TLDdv1RAYnPIrq4Z0L8YK93QKC9VQMnTWSKh4e8/vnZUHvWWVUDs9MTB//Wh
PxWQIgWIB1ZA2gJIUjOg7789OtcYnHBWQCBA3VAsc8w/FrLixXbiVkAzBuK5
VA7tP7V5Txk/UldAMMbx70hI4r8m0qKZiLpXQLwPgwpGJem/R/hMs5grWECn
nQZJOU7oPzmv3fkplVhA/UxQdtfW4j8+GeT4//9YQDmEg/cbmOu/O1fP6A==

                    "]]}}}, {
                   DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                    PlotRange -> {{0., 100.}, {-0.9963557285529662, 
                    0.9999999999983269}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "100.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic], 
            BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
          StyleBox["]", "NonInterpretableSummary"]}]},
       "CopyTag",
       DisplayFunction->(#& ),
       InterpretationFunction->("InterpolatingFunction[{{0., 100.}}, <>]"& )],
      False,
      Editable->False,
      SelectWithContents->True,
      Selectable->False], "[", "t", "]"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.606109080323966*^9, 3.661398149078102*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ySol2", "[", "t_", "]"}], "=", 
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "/.", 
   RowBox[{"sol", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "1"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{3.6061089536118193`*^9}],

Cell[BoxData[
 RowBox[{
  TagBox[
   TemplateBox[{RowBox[{
       StyleBox[
        TagBox["InterpolatingFunction", "SummaryHead"], 
        "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{Typeset`open$$ = False}, 
        PanelBox[
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{{}, {}, {
                   Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                   LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAAnIW2B5tvvD4ixf/////vP/BdXF00
Ffo/cUTyzFOI5j/OO7mkBi4LQBqtDZ9F0uQ/ZDHLW8wwFECYaUOmDxLev0XB
TstvqRpA93q/OIRX7L8alh9oPtcgQKZV5NhJJOI/GlLMUc4dJECrARGmQKLp
P6F7LwaTqidAEJGHwJD3579aI53txCYrQJ4p6f57BOG/nFE/PABnLkBi+J3V
wgPsP7P2yyq49jBAkMq8RPvT0z/chxLr9JsyQPyYg5o6Fu+/H1jeROg4NEBu
xBeVfzDJvyVfBQT2+DVAKCUQwOD+7z9vqcZ2CJs3QJLD3nLHVqa/fSrjTjVg
OUDg0kYnOw/vv6TqhMAYHTtAN5Woc5yE2T8P7sDlALw8QHaMDUdFrOw/PihY
cAN+PkD3adJ20Erjv9jSRFcFEUBAB2/0HrUe6L/zLAsplvRAQI9xP5foiek/
miaURwLUQUASasMTOxndP+RB6r9wpEJAMlFdRYtK7b+P+O1qbIZDQBIjq6Uj
5su/3NC+b2pZREBFL1RVYa3vP7ZIUsFDKEVAy/DSkanGuD/yW5NFqghGQNsm
qmgl4u+/0JChIxPaRkCfw2nWuzTDPxBhXTQJvUdAvi/Z1QIH7j/c0NuR2ptI
QDHxRMRj9t+/SmInSa5rSUBGxm3DNtfqvxqPIDMPTUpAglxL8a0t5j+M3eZ2
ch9LQCEwykZbZOU/i8tvB7HtS0AnAgG9KKXov+xUpsp8zUxAvlUeOcJ437/v
/6nnSp5NQBqetc2Ww+w/VEZbN6aATkAZCVceZDTQP1uu2eADVE9ABCMABjCC
77/4Wo1rnhFQQBgMp1bnQcC/c6wEgAGCUEAzUUlCRvLvP7+OYsHl6lBAuSf/
5NwWwL+7PheckFxRQKUvwcGNQu6/fj4tHSnMUUAtNfhR3erePxLPKctCNFJA
p2w3N/Mc6z9XLX0SI6VSQNBckZP54OW/bRy3hoQOU0Dw3h/28qDlv0lbUqHT
dVNAb0VQ4gyA6D/WZ0RV6eVTQFRBdmLvs98/NAUdNoBOVEBntehDJ7/sv0Nw
TLDdv1RAYnPIrq4Z0L8YK93QKC9VQMnTWSKh4e8/vnZUHvWWVUDs9MTB//Wh
PxWQIgWIB1ZA2gJIUjOg7789OtcYnHBWQCBA3VAsc8w/FrLixXbiVkAzBuK5
VA7tP7V5Txk/UldAMMbx70hI4r8m0qKZiLpXQLwPgwpGJem/R/hMs5grWECn
nQZJOU7oPzmv3fkplVhA/UxQdtfW4j8+GeT4//9YQDmEg/cbmOu/O1fP6A==

                    "]]}}}, {
                DisplayFunction -> Identity, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                   GrayLevel[0.5, 0.4]], ImageSize -> 
                 Dynamic[{
                   Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                 Method -> {
                  "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                   AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                 PlotRange -> {{0., 100.}, {-0.9963557285529662, 
                  0.9999999999983269}}, PlotRangeClipping -> True, 
                 PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "100.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 3.5 CurrentValue["FontCapHeight"]/
                   AbsoluteCurrentValue[Magnification]}]], 
               GraphicsBox[{{{}, {}, {
                   Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                   LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAAnIW2B5tvvD4ixf/////vP/BdXF00
Ffo/cUTyzFOI5j/OO7mkBi4LQBqtDZ9F0uQ/ZDHLW8wwFECYaUOmDxLev0XB
TstvqRpA93q/OIRX7L8alh9oPtcgQKZV5NhJJOI/GlLMUc4dJECrARGmQKLp
P6F7LwaTqidAEJGHwJD3579aI53txCYrQJ4p6f57BOG/nFE/PABnLkBi+J3V
wgPsP7P2yyq49jBAkMq8RPvT0z/chxLr9JsyQPyYg5o6Fu+/H1jeROg4NEBu
xBeVfzDJvyVfBQT2+DVAKCUQwOD+7z9vqcZ2CJs3QJLD3nLHVqa/fSrjTjVg
OUDg0kYnOw/vv6TqhMAYHTtAN5Woc5yE2T8P7sDlALw8QHaMDUdFrOw/PihY
cAN+PkD3adJ20Erjv9jSRFcFEUBAB2/0HrUe6L/zLAsplvRAQI9xP5foiek/
miaURwLUQUASasMTOxndP+RB6r9wpEJAMlFdRYtK7b+P+O1qbIZDQBIjq6Uj
5su/3NC+b2pZREBFL1RVYa3vP7ZIUsFDKEVAy/DSkanGuD/yW5NFqghGQNsm
qmgl4u+/0JChIxPaRkCfw2nWuzTDPxBhXTQJvUdAvi/Z1QIH7j/c0NuR2ptI
QDHxRMRj9t+/SmInSa5rSUBGxm3DNtfqvxqPIDMPTUpAglxL8a0t5j+M3eZ2
ch9LQCEwykZbZOU/i8tvB7HtS0AnAgG9KKXov+xUpsp8zUxAvlUeOcJ437/v
/6nnSp5NQBqetc2Ww+w/VEZbN6aATkAZCVceZDTQP1uu2eADVE9ABCMABjCC
77/4Wo1rnhFQQBgMp1bnQcC/c6wEgAGCUEAzUUlCRvLvP7+OYsHl6lBAuSf/
5NwWwL+7PheckFxRQKUvwcGNQu6/fj4tHSnMUUAtNfhR3erePxLPKctCNFJA
p2w3N/Mc6z9XLX0SI6VSQNBckZP54OW/bRy3hoQOU0Dw3h/28qDlv0lbUqHT
dVNAb0VQ4gyA6D/WZ0RV6eVTQFRBdmLvs98/NAUdNoBOVEBntehDJ7/sv0Nw
TLDdv1RAYnPIrq4Z0L8YK93QKC9VQMnTWSKh4e8/vnZUHvWWVUDs9MTB//Wh
PxWQIgWIB1ZA2gJIUjOg7789OtcYnHBWQCBA3VAsc8w/FrLixXbiVkAzBuK5
VA7tP7V5Txk/UldAMMbx70hI4r8m0qKZiLpXQLwPgwpGJem/R/hMs5grWECn
nQZJOU7oPzmv3fkplVhA/UxQdtfW4j8+GeT4//9YQDmEg/cbmOu/O1fP6A==

                    "]]}}}, {
                DisplayFunction -> Identity, AspectRatio -> 1, 
                 Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Opacity[0.5], 
                   Thickness[Tiny], 
                   RGBColor[0.368417, 0.506779, 0.709798]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, GridLinesStyle -> Directive[
                   GrayLevel[0.5, 0.4]], ImageSize -> 
                 Dynamic[{
                   Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                 Method -> {
                  "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                   AbsolutePointSize[6], "ScalingFunctions" -> None}, 
                 PlotRange -> {{0., 100.}, {-0.9963557285529662, 
                  0.9999999999983269}}, PlotRangeClipping -> True, 
                 PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "100.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
         Baseline], DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("InterpolatingFunction[{{0., 100.}}, <>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "[", "t", "]"}]], "Output",
 CellChangeTimes->{{3.6061089489531727`*^9, 3.6061089579799113`*^9}, 
   3.6061089888910894`*^9, 3.606109082514504*^9, 3.661398155254677*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ySol2", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.606108964296026*^9, 3.60610896562955*^9}, {
  3.606109086733515*^9, 3.6061090868245707`*^9}}],

Cell[BoxData["0.7790979975350963`"], "Output",
 CellChangeTimes->{
  3.606108966027851*^9, {3.606109084282761*^9, 3.60610908713579*^9}, 
   3.6613981606534033`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ySol2", "[", "t", "]"}], ",", 
     RowBox[{
      RowBox[{"ySol", "[", "t", "]"}], "/.", 
      RowBox[{"a", "\[Rule]", "1"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.606108997632307*^9, {3.6061090982465324`*^9, 3.6061091216424894`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVmHk8lN8Xx+1LdtlDDGGQYUZF2z0tREkULSp7kr3STptSUdposVUSoSip
8C0XCSmkhez7zGBmHvu+/J6ff7zer+d57jnn8zn3uoe2Z/DOQwJ8fHx9gnx8
//+ddN5TxMw7Yf3I7AL5Q6BkF87qPVpnkE/y4+x/JDdujzqmpXUDuXZLHPMi
mb6q9vmif/dQp0nEmmfzBDq1ZZ+0sNZjdHPjIN/9OQJ92tN9euHwE9QtcfGj
5SyB+PM+DM02pCDNmBO7HkwTSPfTjN70zAvkUGdbmTFJIOsyODCxNAO5n0sS
OzFOIN8fV++ObnqF+HdvE5kaIVD0n6ryocM5KCxzb+7KIQLt4Ymen7B6i/qa
+OZMeOT7xzJVxhty0YPQh3+7+gl0Ztzu3eiRPFR//4bhLhaBos4S20dm3qMm
v/C+i90Een3ZPGJwaQG62Xd2j0ozgYpEGjSIt4Wo1cCuNaKeQD+jzuRzN31C
qW9Kz76pI9DwvSJu/2GM3JtrnzhUEOhytGnZaFgxWjr+fvxrCbl+9SW5UasS
dOmntBDfJwIlOuq+Gm4oRSZ3rzd8zSFQ6v0TU0NPvyDKFjmfXRlk/L/l1kNH
ytC51LI1GSlk/H1HOomZryghefvGt7EE6vTIVuIu/YZEeyhG204SqP/5gheH
/Q0Nl1ceYQSR+fQ6vB14W4XO7Kzp6D9EICG/kW39m36g8C9vW6qcCKR3zOIS
63AtmkC2D31MCbRyQ+fYYMMvhJPU1crbeWh1143EkLW/keDz9w+F//LQ+gj6
psGnv9GhIv8j2lU8tOVrxB3iyB+k9o6gDr3job22eka8mb9IEHrLRCJ56Jyj
v/vA0ka0t6ij9Z0uD81HrFRtv9mIVmwzXS6ozEMXP/D/+jXViCK3/ilcKc5D
V5Y82lT4uwndjQ4xsedyUUxvmd6Nay3I5nqSz548Lnp6RpOrR7SjAwZXdOLW
c1H3T/ZaM7dupLNiROSELQfp+tmrZsV1I9kpyascSw7yEcwb0/3RjcylmgY9
DDmIveJCtoplD5L70LfTVoKDOPGKWnyLexH3XBBVo3oAjXtvFKwtZ6LP/X/S
/BwHkPhUwrcAk370uja7/bt7P7K41nh2q0c/2qM0ddx4Vz/yVVQ2NojtR+8a
Os4lWPWjcrN7Md1T/UjP0zowzbAfXfG7vsvl6wCi+b+zPDvWh/haQlu3HOAi
jzg61TemD5n65cYsu81FzVHmk02X+pAb2eOCpVw0lna00ONEHypS8E8p0ueh
NDXbra8O9KFz2z0OrxjhoY/XIjPWGZPcnnZazmoQHZeffHWrlo3upVk5XnQd
RFrw9od7GRtlBvZQiVODKOLOWhm7AjZqmtFu/pE5iGZXFjX7P2cjC5Wkdddl
h1BnqpF3/Wk2Gne4L7DQPIQsV3x7csmAjaRV6M2BY0OINfX3KE+TjfTaf75r
kR5GXrKajicV2cg5UPpQ4YZh5JbQU94gwEZ5N25UnEgfRlanrSx621joaOmF
m5xjI0i+Zv/NTYksNCkX+7o5egQtuAncfRDLQuc9XtZUpY4g03x3C+FbLHST
r042o34Encp5kbPiPAu9XE+JO7R6FF2VoFf2eLAQLWblB6ddo2iZbddRpf0s
9KF1a8OmgFGk+q9Zx9uJhcrCjqtSkkeR0v5ivGsLC3UUliW18Y+hyGKT01dM
WOjwosaiarUxJC+1VfKhAQvx9nHbPzHGUMLewh9fKSw0O6lISTg0hs5W/ag7
pcxCKqsOp+35NoZUC++8WS7AQk8iz1VYd42hxVVyx7TnmEiv/jZ7xcwYqrmh
bGU2yUTmJ/INFZaPI/UMab4XPCZyeCee8/POONIOzPjY3MJEDQKaP3HGOMrT
VJjO/sdErjvpQ9ml42hhdcJ40h8mChhyYdwaHUepFQsdNT+YaASCncKkJtCY
PSVb9hsTnb0TccJfbwI1pnJHAr8y0XXaq4+2eyeQuJ998tkiJpK5UPzP4ugE
ati6pJn6HxM9qPkzpR81gWiLBTaMfmSi1MC5NSKfJlC5mwCt6S0T4Sz74tKl
k+TuXzPKSmMi6xnPzrcWk+j4q+COwFQm+rH1lMAzx0m0P+vBcukUJmrqe7L5
QsQkkkdip5KSmMjDMu9QUOIkMvlwctXNBCZiX6+MPPh+EvFtoXTGPmaicf2h
yjWsSTQohoNH4pgo/JRwvyHfFAoaviRvG8tEQhWqEmqqU6ioTl8t/x4TRSuZ
GIvTp1BARIYX3GUieZ+N2ye3TiHTrDXfO28z0eP3u4NYXlMoqW+HcWIME2kJ
+9+uD5tCjXIPPIJvMVG604U3X+OmkMm3uc37bzKRSer9urzsKXQxpDDHLZqJ
FB6ZThR/m0J+A13OflFMNBNdrV7dM4X0/uM7dfcGE3Vd8NvYuDCFBN/ntP25
zkSVx0V9e9WmUT3rzh5zkrMPp94aWjGNdt+0y8q5xkRx+ze8m3OYRmFj91Os
SQ7b0fZPPIB8/6KO8FQkE3luOjeveG0aDUaWPS4n2WaVii4lZRqlbNuhl0My
zei9rcnnaXSG9yo4l2SlpTuDV/+bRhL7Gy1/kjwrT8Raj5DxLHu3iJHrd4nc
LNwpPYPU2yb2u5BcOW3Q4UqdQV1rHFeVk5zN+yrsv3kGXc60i99G5hvX5Wl0
ym0GiZX5bO4nOax+wSHi7Ayqtt0w+oys17Mq8eTtuBmUYfHi8DFSD5siy8SE
NzNI8+eV/ftJvUxy60vSv8+giMdz0QdIPRXSjrPeMWcQPdgl7wSp98xjWali
/ln0IULxdhrpR+WlrXv/rZpFe5Svb7An/cs+wQrv2TmLhMfoUWWkv3FHrjwf
DJxFfK16hx1J/z0di3hiqbNob9bqj68fkvGt9iso4lmU+1M1LozsH5rlpKV2
0yx6+aCsxZ3sr1kt+lVL2Tn0Ker7Sd8npB4KtZlWRnNosZK4SfQzJvomFvDT
0XoOvVJqUil9Tvb/4IslfmFzqHOt2zb/l0xkWqyaG8+eQ/UPY7en5JJ6531o
SBOcR1P9rNqD75loLn3XXK7mPKqkjE8a5jNR1e1bNt+d5lHH/g+cyc9M5OXG
3z5TPI8Yu4wn9lUx0dZdyUJiLfOIaFzr8LiaXH/LGkOFiXmkm56RwPpJ5mty
4oTx8gXUsrQtNaeBzGeeLXHw8QLSXf89pbuXiXrtfdXbLfjAjmP8NUqIhRTK
A3TPW/EBcVXsnq0YC21cd9RYYycffP7KPigryUJPjc6u3e/PB0eL/QryFrPQ
AbGbBxqS+CC0paJthw4L/SrJSawV4IerJ3NFozaxUJH5hHrxD35YmvmY+H2V
hbhZM7pujfyw+aHn2fEbLKSuw7d8vpcfdAfz65RiWOiMnPi6tQv8YDO/68GO
ByxkzlM7mG8mAJEH+6wepbFQZvr6pDcPBGCx0bK7a8tZqFFz04sdzwVgWnDL
CYUqFhJ7sOU1L0cATJZ1d/VUs9ChKw6fjb8JwJWbBeJBf1lIy8Oz9eWMAOwV
fLJTpYeFHqpFajxzF4SB4jb/iAUWGu+uSbcPEoSigUxZfkE2cnqtTJ89Jwhn
9NaVBYuwkTxkWO95KAi0weG3mlJsdPPQj2CpGkGITbMz/KjKRv0mitOFzYKw
WPpr+Vt1NrKdPHjFt08Qrpc3GcUvZSORaOLRFyEhCA7TfUtfxkYX38iXnlkj
BBu+9LqdorFR25n9dvq2QvCLb+fEHzM2Wrcptf7PbiEIOyCirWHORtN/VwzQ
jglBB6sozt+CjfY+OX+i9YIQiH2vVTq6mo0++lYsRN0SAoWr1g/c1rJR6Mxe
BeZLIfg9u5lvHLHRr7Jnyfc/CIHFouc6SRvYyCym32BDmRD8bVf+aLSJje7s
Ybzj1QmB1e/5Pc82sxFPK2xdYrsQ/DFTSp2zYiO7/rIKW64QVDhesoQtbJT1
TmrnxLQQTP+r+uBrw0aLwne3pIoJg9UbZuFJWzbytX7is1NJGPTGGb1HtrJR
uQx7cEFHGMKGzv/dsI2NljWannttJgx0IUHjeZKvpJwR3o+EYSIp4EayHRt1
+ZfeFtsuDP0mzTGU7WwEKyTUPrgIw0617tYbJD+Z35Xq5SsM9hm3Vf6QPF+R
aCJ3Uhiuz3l38tmz0YG7vflFEcLQI+jZLENyoYvJpoC7wrDysEDm/5+r6p6q
Vn0iDKOXYegX+f1pLt5T8UoYWM4PnSNJrv8g1hVaKAzyR4XC1Eg2v+gYQKkU
hnpv8UW3yfzu28aP1/4VhhHj1y+6yfyH5bsvhncLw+ZN58eUSXZoMZIwGhIG
c4/Yp0Zk/dkvQuP+zQtD9ep79pqkPlLBn5dGSopAtWV6OkHqGWAhkslQE4Ec
i7tOT6zZqIp/h3mnvgiUrkueNyb1N/j+sChmhQisWpm94xHp17XYDpu1m0Rg
+Vvz4Q7Sz836xw4+dBWBtRNu/8TWs1HKYCFrc4AItCe1HmetYSP+QsFjw2dE
YPVopGyKJRsV2cVFbo8TgbvBBYKZZH9pKLXJzqSIgHzh3Idxsv/C2vUSXr4R
AdBi6WqS/Wl5LD9H8IcIbNwtMzRD3s9+LqxxPdooQvrheqiE7GefW1iynSkC
boEPPntQyPvgy/Ijhfyi0MxVGzNbQua/cquKgYwo7M9J3uShTMb/Ul0epy4K
r9rCnfwWk/un7Y/O0VWi4LY3I0VMgtwfAXt/tW0WBf/4tU5J5P5Tmm6+aLdT
FOwH/3uziLzvbVLsbtUPFIU6HXOXoEkWStw29LAtRRTORtApO7tZiN4Yam33
RhTsHpY0prayUKXP5GjBZ1GoVZBdXtPAQqOXFhzj/onCTU2bV8+/s9D2fClJ
O2kxMGL07Nv1loV6rO4WFiwRI/1xW+WUyUJnfysc0aeKAedeRjX1OQul8ZaU
C2wWA7biH9hJ3ifndQ0vFpwRAw3Pr7R7oSwUm/vaRP+aGNDeDX2iB7CQIZi1
xsaKQcXfc/ZpXiy0e7/F6pAcMVj56m2u8E4WyrlrParXKwa33n9UemrMQtZL
q1Jih8Xg8pekvb/J+2HLq+2OAnziEK81rPZPhTzvKp2yW9XEIa8yP9CZPL/d
5z19Yx3EgSned1etkbz/RDOVBFzFwTZyWPkv+ffhpqrf12B/8jmv4odbKRMV
mB+lbIsUB6+endTeTPK+43+hhf+TOLiZzL/MOsNEXxoSHIL1F0HS3oUdi6SZ
KNbTeXSMsQhUhfzO5vAxkQ9X+lEYLIJh5GxDHelFiwQvt9/Ytwjehi8Kj2/o
RQ4mvkGp0YuAvvcV/WhyL2q7Yn6zkVgEyxZtXdmp04veyPBo7rOLQOHsFbdK
cg66HJ/+mykmAb9O65pFCPaiZW/UloxqS8Ddwq8vjnf1oIBmvkxpJwnQkBXr
Xp/cg6bNqis25UvAlQcjO85I9aAfnyL9q8okYCot6P3D6W6UvAVkHOskYG23
5dEbrG604eC73a79EiDp9pDHLO5G168/7j2tLgms8jrLqKPdSKn9kGD2RUkw
4LJlT1Z1IbOb8+tVbKVgbePP1mX7OxH9yKz3691SUHx/1VgWdCJz6+mojd5S
sFp/z7KFZZ1oJd94fcAFKSCUvoLUYAdaG8oNKnkvBf3me7K/X+pANgdakv0o
0tBd3evcuqoduRsXzn+akQb+kk0XfuxpRp7i+bo7xWVgb6n3hmylZuTFfL+V
pSQDxi7jWeZ/m5DP07cP5OgyUFlfsM7MsQkFKGSY+PjKgFb3b7HxzY3o1OxD
V5m/MvDk7xEnVfUGtIW5ut10jywckroiFXrzF/L5/Ydz7aAspJwb7x+w+oWu
FAdNt3nJwuBnCXWdhTpUEp+ieCtEFmLe7oquC6lDa3Yssuu7IQuRhuUu6xx/
Ilp+Y/6zT7IgeJFmFSv1AylHnb4nT5EDRFXmP363FLGWf7Aa5ciBVqZq3o7k
SHxu9gbj09nFIGTXIe4o8xfXhHrFnr20GDw1zv5O8vmLtbhrxyyuLwb1/CZq
zee/uKyV+PA+bjG8cz8V+9e/Hkti59U5bxZDQ1+GsHd5A06+pL0hhbkYoNE9
KTW0CZeIFNhf36kAS8416/Zmt2OFC/dyrPcpwH9n9qx15+vAPhP+ssLuCrDp
5Rl9U2oHXsTW/HUpUAFOOns2hp7twDu/XXE+d10Bcg9ucLuypBP3RDscCCpS
gKHqCvude7qwqBz7iJOhIvz8yHvpl9uDx68dsHpiqgg5s/Yb7P70YOb8T63+
lYoQfs1aV3S8B5dzChoubFKECeOnB0Qte3FkZbRV1gFFsP/+IVP/cy8WuUjT
FritCJ4CvMOPPzOxCHHyX86IIkSpjrA6Etl4/NDAu+kpRdjDGjHYUMDGzBa3
21Z8ShCR3TYU/JeNy6tsrJsllUD4glTrKqk+HJmmlieipwTDLo5hvmf7sIhr
0e2De5VgrPFrsPi2fixcLbxF4rMSbHaKYWz5MoAlAxO9Wr8ogUxY2WRe0wBW
kGJczKlSguLxt0OtQwNYd7t7wa5/SpDwKNbCfSkHb64uNEocUQKO1rF9Gqc4
2C7Q0SZomnxfbM34/psc7CTF9gZ+ZZhbELff9YyDvbYrJvdIK8ORxh4+/yoO
vlwdLLvcUBmY22+5rlTl4qhAkeULpsoQGKtTQDfm4ntSSbZ1q5Qhdu/da73r
uThle9XlE1bKMKF12z/Qi4tLqnXHPrsrw8fedt78Sy7mq2lstH+oDAdv5scM
LuNhsaCQca1kZcgPFT21wpyHZaVFF4+kKoPNo/RO4408rGVvbvcwVxkeN+i6
0Q/yMKqJKWqvVobMCz0K927zsHXQsua3f5QhKDBS51ACD9tLf5qIaFaG4HM1
Un1pPOxq32dq0KcMMbKluQKfefh8zabnIUIq0CXgpXm6l4cjg5rwRgkV2JBg
0vODx8Mx0kdbFORVgJr8T7lugoeT7JMVC5aqwDRXSYclRuBUnjk9Wk8FumPU
MydlCfwq5rv9weUqsONjz1y+CoE/1Uxe41+jAq/uFIda6RO4LOh26u8NKrB5
Z7q9nAmBf0jrlbywUQEDmUnPaHMCt9jvmrbdrQKljz7k3gAC9/D6lNQPqkBN
ge8rKWsCc2IuMnheKtCoKXMQbSPwTM3rgHtHVWCuT84vy4nAmnUeCZtPq4D+
+nsXf+0l8MbfilXj51XAx/VpY8YBAvv8/Tb58qoKyC9h7TdzJ3BUQ7j+/psq
MPFxmOfrReDsRrPdUvdVoGC/2TkHHwLXNfdewY9VwOLCSB/Ll8CjrY/fHX2q
AqMHApbR/Ams0rG9SyddBY6756roBRJ4bRe/XP1rFUiOwzk/ggjs3vMeXc9T
AWOVYw2UEAJfYR4JWv2fCghF3Aw3OErgdLZGEqdEBZ64fbjTSnJVf9335EoV
2H4njG/jMQLzOFenHWpVYCs4fnYmWZ6wpArWq4BCe3S+Cskrh7h73reogMnj
Iz1R5PcuI88iD3erQMJjKfNXZLzwMef3qv1k/jaXEsKCCfx0Qrzn+6AKKF3P
k5kl8y2b+ix/foLUcyw80jCAwOyZoxtM51VARi9hXNSPwJLzy0K6hFQhuvvN
ntjDBDbla0qOlVCFssBtKbXeBN4lEFNtLa8Khh/bags8CHxSaOPspIoqXHte
3rTTlcDxIuOGWUtVwcl6S1G8C4GLxDL3HdRThSXat07e3U3grkWu12WWq8J3
j9d8q3YSWERK/mMJQxWUtdNcorcTmCpT3nt8tSr8euoaEWND4JDFJpv+bVGF
90ZrNjxbR+BYxa6jUfaqoKLx+d+bVQT+qPzg6VpnVeg4UbAp2IzA80vm5556
qoLxpY6USR0CUzRzjXcdUYWbZ3KfflEnsLWWz37hEFV4FLD96jpFAt/Srck/
Eq4KCf4rtNYLE/iN3mXWkiuq0NN7glU2y8N/DFYq1USpgjjy+Tg9wsPqy5OP
0x+pwuxr66TjnTycuSLIZCZXFd4Ev2Ul5PNwzSrKwdcFqrCjPd8p8TUPD1vW
R7sVq4LJm0Wr7VJ42HL9+r4v1arAXZv7oTCKhyutpVNvslXBu1Qu688eHubY
lP5aT6iCpIqY6K6tPCyz7ST/0JgqbLOxvHppLQ/v3tHm6iyoBtymCHtiKQ/3
7slW1dRUg/2rOfJy3Vyctneu9ICuGhzOa/9N/cPFvvvsAhIM1aB/2q5rroyL
+136i1RWqUHuxAPHfy+4ePCgnvdiBzWo+C0Xuc+bi2e9krPFLqsBbIvrSP/D
wUXe3D1brqtBXXaiXUQJB184tJY/MkYNgiIezS7J5mCBw027BBPUYKfplc9X
IzlYzE9pau6dGghYc2fWm3Pw4pCYTSO9ahBOXbw/IGIA/wlp5Zhx1ODXhoUW
k4AB/OCo8YOQYTXoEErY9NZpAKscr2Jz59VgI/E3fFx3AGueFIlhKy+BwJBm
geul/dgw7Py/VtslECq9xmZ0qA9vuB4UWPl6Cfw9X2x1VoeN1XLb98TkLYG9
+bJiggJsPNrssNHpvyVw8rnJL5sOFk6jMZQ7KpfABWbjX8lEFpZsmCie6F4C
I5QU2kVZFq5fdklBX00d5qnrvLy4vdj/y/3/rkaqA7VqC/p8phvHzeeLb3LT
gIhkAjPYzVhS/2tQ3CENyNfXYdjeacZXdtT9ZvlrgPqxGnFVi2Z87Glf0s3T
GhC8ZIIyENmE7Teq0evvakCNMWMyWLsRi0SeczlSpgFFhyz0Pmytx6el1mfd
pmrCXd88V/3Qn3i/+he7lhFNiHi7YTvD4S2WLDbiUJy1oNXmXqqLXD3qeuxY
eWGvFowK6zRnhdajj8dPpbbs14IMu5xHpQ31yFP/y4EHnlrgwTvttDapAX2M
cakWD9ECi4MeKRuXNSLPgzeyB6O0oD1mzCbLoAXlTzNDiorJ9Vbf+fp9ugPF
/JHcvqRMC7IkGF/L9TuRVzaderpCC67XJnXfd+pE0p7nO81qtEBhr8qVlNfk
82+KO180awH10diziINdSPrRZsbNcS3gPxHs3/euGx1akTK2z1gbeLVRW/ks
mCgqRlEmnKYNT8s40mX7mSibdd3gKV0b3rdGKu66QN7/HwfvZ1pow6nHxlF1
//9/7fzakmNW2uAcd+KetQMLZVY03Ix21YZpyfGf5S5sVKO1LS3bQxveHmqJ
VzpHzrNninCdtzbEhUx4Gyew0RrjF8PK/tqQqfXyv5dNbPTjzrG9qae04Y5G
fFvz7j7E2yel+/mONuw2u2XUt6kfyb+7uK7jvjakRTrWh7r3o5WSo7sFH2rD
Ic6FbyVh/ehCUdMN2yRtOKu+Ljg5rx/J6rwk/mZoQ7CZu+5+7QFE52z8j1dK
1pu07046bwDttvrwR65cG0r1Pk/oi3LQ2WQqz/ybNljeVYs8tJSDvjjIap+r
1Yat/QLLlHdwkBMphGiLNkj4fRvYnsVBp86f3qk1pg21a6UKG3ZzkQEnTPLa
pDZsDFKRLw7gon/7LpVzZ7TB364v1/kyF1msiFr9nwAF8r6P1lx7xUWTAwmU
3bIUsEikv+Cb46KX+562fFpMAQP/C0ftZHlob0XqAx1lChDjrORNOjxUkPJ6
0ZAGBYpLFlYzbHjo7D48HG1EAf2ShfNyMTxkWPHl1bAJBcINtzvlJvNQk3ml
zz46Bc6wdrXPZvPQGtm6Jj1LCpioyuyKqeGh2fKu0hJrCvQdH4pJEifQK3NW
mMFWCiSKCPVFKhPoQMrAytvbKZAtLhatsoxAn8NHMw84UeDf+UgBc0Sg8+Yi
9yc8KJC2qO3UlmACmaQs2u56iAKz2cu+BJ0lUJuMjOhXXwp8oWzWX3eVQGhA
+dy9YApEHdr+vuYxgQb3qq+YOkaB74b7n9x9TqCn5VqE20kKyD+MpMy8IhBf
CtVreTgF4i+EXSgpIsj5zkQj9iIF/jvmr61ZQSD3cHrDdASZj0QpR6uWQCV7
12yrjKJA8J/5eJU2Ah0rR8K0GAqc8layl+olEMV8M467S4HCwcmq9AECXZbZ
zvB6RIGfNsnV1RMEooc7cr8lUEA696XRvjkCdfU7p5s+oUDRiIiAFf8gurfX
xeNhCgUyLnymvBEcRJvKXZfMv6CAWtpPgis8iEYZXn+9MyjQuivBY150EKU+
O3z7+ysKXGmbDukUH0ROMgG29DcUyKHuUH4oMYiEwkMEH7+jwOj3s/ZLpQZR
Xn/o54UPFLAS75Y9Kz2IvPeeOeVTSIHnmcH70mUGkUJ5uFn1Zwo8NI3WSZcd
RGWMywOMEgrk91D8z8gNotBnkS/iyyiwqDfNWFN+EOnKRLvxV1JgD23RoTiS
/4TdVvX9ToHYV6Vy7SRf7b//u6aGAuvWfjOdIflKQ2/VTB0FRsKHHDn/57JV
pQZ/KbA4Xf2/9yRHvL1R4PyPAnV3G/33kHw5ufnN5Wby/SI17zoy/qXo5S9z
2ijQc3Blqg7JF09feNLSSYESJ6axPZnvhUN1D8R7KRBiY7PgQNZzfqdOzEo2
BTJTW9WNyXrD0YmrXgMUUEiNvtYuOYjCjCvC7vAosG1vwgZ/Uq9zqqqhn4co
MPy2YHstqedZEX///lEKiPtMZEuIDaIzI588lScpEHS70ldLZBCd7pB22TxD
Aes2oQtSQoPoZGGuTTK/Dvg7Lk3tnCfQiXQh+C6kA1kf5k1rpggUGrt71aSo
DtyWs0zyHyX7J2h62U5pHdhrW7uxgE2go/vtNC7Ikd+bpcYd6SJQiE2ywisF
HZAb/Tpd1UygYMpGQZElOrD7xZFVz6oJFCQTO03X1IGMZY9MlMpJnu0dctPW
gRvHAk6tJfs5oP5GR4G+Dqxq6bJKek0g36i6z4HmOjBQ6Dz59jqBDp/SeR+/
SgfMq2IfvztPIB/vE68qVuuAasRm08OhBPJer5qgvUEHuFVnkntcCeQx7H76
73YdsHL/aLfGlNwf7bnBAo460Ex74FmrQ/IPocM0Jx3wO1izUYnc365pL51v
uJD53Lds/jTLQy4ug/R1h3VgtHesJ6SMh/Zt2Wjo56cDnQ+sS5Lfk+eReaz2
w0Ad8LAPC7yYxkO7pS1kh47rQJ7B23K3azy0q/QCN/WiDjhwfiXds+IhO0OZ
l5LxOjB8smk/5x0X7asMfklN0oFtkdtu/njKRT4+P19aP9WBy9tqBXxucdHF
lLsZF9N0IGeL8amvh7goT00hazRXB4KzTj1Ys5iL1CVUs1u+60DfnoQXNA8O
omacyZ6q0QGFnrM/C205aOWWpmylXzpQrRDnKUDnIIeIhByHfzrQ634roYKf
g67MaLwt69EB7dH6JNPkAcQZoOS9mtOBR484HW+q+tHUjYi8b3y64Prt1IhG
Tj8SMejJYwrqQlFGJn3b/X6k5f3ivdYiXaCvEVnPculHTi36H2OVdEHruVWz
MasPffphXBhG0wXTZf35hqNsdOv1ymI7D12IPCv+eqSTifTcDTxee+uC0+nA
0rH/mKhIXk1A2lcXNM9NFn6MY6LBU3ObaoN0oSKpjj/chomcNpZVOIbpwkTa
/TKVrF6k3uBYu/uhLqSuOLN73LsHveILbHOv1gWXTr/9J7M7UdWu57Ohlsvg
d/0KjV+HG1BxdfBNY0E9cBjYVRf35j42VwCJhyIkm3o7xkfE45cuslH8i/Qg
P5y6wzDrKb7NenOtXlYPKqeXVW8PT8eu/MOXL2rqweWG2Zvyt3PxrHnomT+W
emDTmSR5UL4YWyae9gkL0QP56By+0xer8asum17mcT24I2T/jeNUg7Woqt6O
p/Rg/hGLfxG1Fot9KPDQO68H+pOFi9V8f+J/tdMHfkbrQVw0R0NA6hc+KRi+
SzddDyxENoZiu7841+8S/GjVA6dF1VJFCc3Y3NO9Uq9TDz6c6rnuP9uMP+xD
Dpd69MC08f5Y1YEWXGAz57ZyQA9q628FJqi34mK9MxeeTupB7MzmW4ceteHq
rpCi0MX6wIp2eNCMOzDbxX2thq0+rHpgMq0T0Y39dqKyU3b6cOWT/J2k192Y
Y6tp92uHPpyePE3vaOjGhEXL/mu79WF8z7MvRUY9eFxp77khL33waDe3/fOz
Bwv+3lH49bw+JMYdPjcrw8Sa25BFUJ4+RP7weARubMwr8Z+L+agP90ZvaGZf
YGNs8ag0p1AfjlclLe54wsbuekN2Q8X6MKnwRvZOOxun8D/3CK3Wh5qzkZ3K
B/qwfr5I9FmmPjBuUDWu2vbjSROGQ0KfPugVlM4q+vTjyhduip84+rDO0SXd
53I/9ruf/2RuWB9kvhyxtS7sx6+C/PIuLugDti/cPaE3gE2X1bRGqhgA4ZZi
zxoZwHyJ0ynpSwxA89Dod2dJDq6T1/et1DSAnpL1khd1OfgY38Vh8WUGcLxY
tF/EiYPfN5uJ3jIzgIAw6eqGHA5efS/O9P5WAxiRmiScXbh4kXjp2LvtBrD1
xEEXnyAubr7AK/zjYADaiTHLaJe5OCxwi5XSHgPYHWqr0feSi4tspvY99jKA
A4XmR6eGuXjTwoGIJ2EGMPbvPsv7DA8/jVLrE7xoAKs89ObMyHltVvGfvW+E
AbwTdUpLj+fhD8a71MyiDODUgdTx6EIeNnCxfVv6kMz/n0IiY5yHr/SKKOsn
GIBabLoTCBG4M6QsLDqZrPftRxiVI+fla8jG6YUB/HBdrORoTM7f71e09+Ya
QK5J79OmAwT2hZHNWz8YwH1acqO6L4G/fn+TmV1gAIJ7nJYJHyfw+S6jk6eK
DeBYyLXTFdcI3BTY19z8xQAkg4c2PbtL4FVTaRugwgAU/RmZWgkEHpShSInX
GECalmWTzGsC2yW0HwusMwDXXwIhF94TOEMv6V/dHwN4THtrEfuZwJ7rVFLj
mw2AUT8h/PoHOc9X/hVfaCP1ry9se/ObwEuc7gd7dRnAzsGP9/Y1EfiPn/Qa
4z4DkG7iosdMApuOf396h2MAQbHnFE055Lx96YbIGEH6Ecs97z9E4H7JLQH7
RgxAYNNcwLZxcj5/JPTr87gBmO3wq6udJnCKTukqyrQBRPyeTp6cJ/BC9oWk
yDkDmMafezz5B/GB1esEB/ioINXZnrJEcBDnf5323SFEherxn1fShAaxgmN+
zTtRKuzI5Y8UFBnER1tOmKtIUIHi7pNCFx3ENYcZ8WHSVIiaPVnPEBvEhiOD
Cx1yVCjcQlsqKj6II89nH7JSJNdvkj77iuRu8YDvGSpU2Gih2quzaBBDHNVM
Wp0KJ3r/ugaSnKjFenBsKRU+0h2Y10mezEqdradQQXuJ8rmTJDuv8vRco0eF
kKB1GitJzi1dWvmESgWLmn3VFeT60vaty4WWU2EmPfKmEcl+jfH3fU2pYE/z
POBB5lfhvXfqB4MKY3uk0REyf91BRTezVVQQ+mm6ahNZ38Vzv8viVlNhfmp4
C0HW3yJy13B6HRWGmPwnAkl9LO/Z33HdQIV4h5jSz6R+DzQkx0s3U2FO77Ff
8QKBh19+269vQwW9nX2pGTMEtje/VhK9jQovNl1BqyYInIU36w/aU6FkPdv6
yDCBvevxcL4zFaTL9H8Xsggs21kV172XCnnmzP0bugj838BfC+kDVDBS/Lnt
dAuB5fk55708qfBjMxE/UUvgzxIT2jGHqODuO60C38h+VxL4mu9LhcOOLWss
SwmMjVQkpIOp0OG398O6dwT2W6mTbXGMCioqs3TbLAIrbTBx9DpBBbbejWTh
5wQO2L35Yf450t+s4di7ZP+rXQrR8bpOhdXBKwMm/QhcHn2u/FY0FXIGeBW3
3Al89EHkkfwYKgRZff7+x5nAlVmJOVJxVCjzrlp5GhH4ZH3lmvxnVBCQLXyn
LENgSufvtq5UKnzw+e21ToDA1QNtl6ReUqFN0DxNcYyHdfnHKjyzqfDzs8Oh
tkYerjPSdpL6jwovq5pu/3nCw2ErjSdWFZH+fy69fe8OeV5sWBXvWUKF/u6Y
tUKXePj87u0dHytIP8NdLQQ9eNj40pkAzz9U+FdhrxOqwcPX6+uufORSAVU/
iNxynYvNO1v0uwapcFJ6mbJTKBe3D7CqJEepICu8XUXZnYtX8s/Lek5TYdN4
3cqSlVzcbWSYJClqCFSr+LisDg5ef+nyew8tQ8jbeOO9mD4HT6xN9AjTMYQs
zn/H5GQ4+M3ke6mHeoZwrKusvn58AOuE9B36YWwI5yVQ2KOvA1jMzUFplaUh
fOXbUTTnNoB/r9U8JbnTEKwPa6yIvN6PfScLLD5GGMLczj+RbplsrJ33u6cu
0hDe7Ai/fiaKjZuCuXc4Nwyh5fT7p3v92Hg7S6tP+44hOL34ZHuYysb0+muP
byYaAs61kKlNZeG5d87THu8NIcTF9b30XSa+Fzz0nyTLEMb4qaaJG3pwA0oU
8+83BPfalGevlHuwuuwW529c8vkBeZsr3G6c/iaRd3XUEN7PmspFP+rGn4a2
aC/wG4HPu7dlgpwuzDyeHDmkbgTSSfHLpW504tWntznW7zSCvY+uJoysa8Vd
F18wnxQZwalSRc6enJ944FCBd+k1Y/hwYrn+5ohiJFm18bZhtDGM0hrOR+wv
QcYmPwruxRjD/IFKpzuMUhQw3ibtFWcMQga1eWLdXxAnUqhA8LkxrLPwnKKh
CsRJ3yFlVWQMPXV+Nyz6qxGvr/d9xagxnHP4/I8W/hdJ2wd30CaN4ZbG2/qf
3X+RSe7kokczxpCqpWVP31qPgs5KuPsKLAdWfLooXakB8RaZLRKXXQ4rtO57
CmX9Q4RRmOtWo+VguF5k5Vh5MxoMlBet9lgOTw0vOap3dCA3x76gGe/lwC+/
wsteohPVmBfXU32XQ48sw8V5ZSd6NROYFhm0HGLhqVVHdCfyvfHNCs6R8YQv
27aZd6GO1ItX3sWS8Ta6r9Q8341qm3n88RXL4afkak57fy9aj78eqaxaDgV3
PVk9Mkz0KiWxbrx6OTAXWlRzzZko6sjWZ7v+LIffj3a/fR7ORNYTL8izfTlY
+1x+1ijJIu+vBy9cnCbzFbimsVGLjbJtv8/6LDeB1lKZ5W9V+pFR25vAq6Ym
sBXt33xpRT96eexB23OGCXywfZIpt7MfpSR4FHdYmsDsk6U7jkX1ozjuRISL
tQmsybx8zWiyH4Xd1ZWwdzOBxAFBi80VA2hq2aKwAE8TOLz/vOx0+wA5zxGc
qEMmsEuVZRQwOYBCugtrKvxNYCIofv0VAw7yWuF4b8NpE+h3Oh4efpWDtjaG
q664awKPHl/660XnoopAr6hdsSbgmu53/Is1F20WsJ05+tAEutWecZpduGi9
kUJrdpIJSGW4ZK+8zEVm4ZlPDTJNYNCrYGNMNRdly92R2/LaBI7XyEbltHOR
YdqJy4femEBj2nLL60NcpFsL3ikfTKCvfFzbTYGHVLQb9NW/mICX9Kbo5N08
FPf+06PV5SYwtOP4mZM+PCS/NUV83zcT8D43ck3oJA9JHg8ciKs1gVcvg4M3
xvLQQplgjkyLCZQlXjq2oZqHwvb1LTVpN4G1m875ljfx0CS35o5dlwmcEKF5
87F5aFgp/tgNtgm4Px/m3OMnENPXdKXgmAnMaelwTcwIRMilbzk0aQIl19Wt
t6wj0GShxr6KGRP4+GGxvYgtgcSlJMKiBWiQdzij95QbgeQ/XLrFFabBhJLm
CkM/Aqm5TSbvEKeBWda6d5fJedT4bW/JYlka/LptUr6MnF9XuBz4fWIxDS4e
baaE3CXQesHfPQ1KNFDWHljnHk8gB+di0UQNGrB+LNiaZRFo3/xK1XktGszp
Di+Sf0cgz/TXhu66NFj0jWL4qJBAx6fit+sa0SDi81qT2EoChaXIuUWa0OCG
kNGAeC2Brmy7HsI2owG7x+uD7l8C3Rqdv7R1BQ2CJEPP9zQR6EHSifuvLGhw
5z6HbttBoCfWnFTptTQIUfQq29lLoJeE54cQRIPOiqO6/P0EevuoseLXRhoE
3v9o5cQjUOEGh0Zzaxq4GP1bYjdMoC/95f0PbGnwallYAnuMQD/ur5udtKPB
8sWOhdQpAv1Zmye134Fc/6F4sMwsgVp7DZd+3kWD+osH3z6eJ/2IeWa6dA8N
bAeF1nnzDSLeKpWNl1xosOeub+d2/kE00RGzq/sgWf/9dV/EBQYRX5TwISsP
GmzO9Ot4SLI4I+xkujcNDhzct2qSZPmW4WvivjTQlB0vNxQcRGpXjzz296dB
tcybGBrJOiYdmdVBNNB7ciZGhGTjht2faMdo4CVQWZ5Dfm9+sbr67gkarI6+
b2FE8jrq5vaR0zToTd3Te5rMx/pX4aBzGA1S/snXPiLz3XHOTCD/Ag081t0c
VFwg0F7dl4vVImgwe6uvIpms16Nac1lYJA3WwVajH6QefifjVrbdIPuhtpiS
PE76uVTSBm7RoMXz0EeFEdLPysv7Uu7Q4EO88wiNIP08OuUnFEuDba55nQTp
xy21kDCfhzSwzMiIcWKSfn5h3qqMp4HiPk9R104CJQccfGKYTIOhaRkXyRYC
vSnaWspLpUHWNb3ve34SqOBwyW+HlzRYYi4mMfaNQKWyFr25WTQoHaw9vOoL
6ZfnMrFTuTR4Q19enpVH+iWRqNr4ngbnF+8ban1F+pUnb7SmgAavdz+8+T6V
QBMifPYLmAYOuo+POt8n90NW0/1r1WS9nzxKXQIIdOx3clfOTxqcnOpzPe5J
oG8znmb/fpP63tD5tW4vgU7bDdQYNNHgnKf2c/ZGAjVwZ8SrmDQ4JCbFeqRA
IBOl4r3DfTS48jLGaJMYgSLXX0lX49JAptRb/+kMD628LWnlP0L60/Xhy7FO
Htr6SBpE+Exh3ehl2vkMHjr5KuRwPL8pQMHwt5J4Hkop/hVjImgK8UdOGxdE
89A0+0HrbhFT0A+x7fgSwEMZlkvPpUuaQjietN1uxENizbQPNqqm8MCO+9Up
novMibutLWqm8MSyYhE7kovcBUeFjqqbwkuBqnKz41yUb5S/6/FSU5hqPnyk
bysXHQ6Dob5lpkA1fNfDG+egcg1H42i6KdSUHPa4tIGDhs3e7VpqbgqWddyX
sVQO0rRWPPduhSlcFvlU7SHHQSeCGr81W5hC2/DEU8OOAaSLPQ4bI1OQmT1o
Gn52AEW4H0up3mYKFS6XLV1T+tHovHp8xHZT6NPZs7Ymoh/5JFXctdxhCr7+
xnmD3v1oa5P6pRc7TaGroTPAXq8fyTtVuIXvM4VJrzbVUy/60NMt6hrLD5vC
93NbRn7GsdFnk/KHNy+bgsTgCv3gDUxkUh1ye+MVU7Ci1K7gqjLRU/8l1yav
moL3y0cphsO96MrLkJPeN0xBO/O9b++zXmRHWeK89o4pdOa9unV4vgc1KYbI
c5JMYR+9s0z0VTeamFW9ta3AFLSqHvzQb+1AgyPbbkwVmoKnNN8tl5wOxO4P
v5r+yRR08IS166UO1PSvM1yw2BSu8X/JbtLtQEV5GUH/lZuCon6/hf/vNnQl
wNLB6A/p16AI/8/6ZiTbsnexBGEKvwS6Qnipf5HBfw8fV+magYF7/Tp+yxK0
wuvrDrkbZlBcXRYqt/EnVk9lri6LMoNh9okyatZPLNArqnfqphlY3com5BTq
cI3P1tmW22awy/iu5vbeOuzjV/vy5QMzaNAeZ26/+hs/OtrID6lmkH77sd/x
wno8fYH7LgibgYCfY9PmoRbcUSz9RLvEDLy3WHxT29mKy/lNo/6UmkHn6hfy
ibmt+H7EMffV5WZwtMHqQOKxNmx8bUJSpNoMZIPa75/gteODMfw+SU1moHn2
rpq9XycuTlRU+TFmBrZbP24spvZg+6RWbc8JM3h7yn7DYsce3Jz0wmhy0gzW
J7VQGKd78HjyCqQ7awZXmmuF/33twcufOfuECdBBNGPVyyzXXhz/Ii7PWIYO
rsHb5vUimdgg7WBRqSwdnAOiaEsymfh92rLKvfJ0MLxue6C+mol/pr9vvqJI
h4erAjY8VWBh0cy/Aq1L6PA5Yu7G6ScsHJqt6HjLgA5v4redIjLYWCCn1UXH
kA4DS65FGFax8e2cF94FRnTYnCbH0O9n48w3K073mtDh+0litTe1D3fmOj9Z
t4IO9UInbXpS+7D9xzgudwMdohLiUcHtftzy8eBExCY6jF0Hw/6sfnwkfxm/
mhUd/JryZxsq+vGVgvcK1jZ0wN1N0Dffj//77++aZHs6JL1YVdJ0ZAAbFCtG
2e8n81tgvsV0Dl6reuhRywE6mFaVGhts5WDHY3lpfq50UDgyu9HOg4PP6u76
EulBh76Hpz3LYzj4x/U7s0WHyXw1o0+HMTm4o7N90fYjdFi8tOrPfzMcPLaa
ptrsRwf29XVL38tysSa3esVEIBlfPivvjyUXH3WUCKaF0uHZsk0XS8n5KTLT
JfzzCTpEjxqwvydwcbxgZvS2U2S9tUH/3crm4rL3Ni8Pn6VD9/ZQwvI3Fyup
RXY+uUgHy+6OUpoqDxd28TnJ3qLDss7FAoEPebhmjYNncgwd+tWjXfte8HB3
7JMQ4zt0+B1q/XxJHg9Lbll/y+Y+HXoXCx58VsvDblnnyi8+poPBG8bcckEC
hwp9/yOdQIfT564L7CbnzesH1boTE+lQzTkwRF9C4FyZgoX8J3RQ/R2jKkEn
sFDouMXQCzooea1MNjtAYJVqqy0X0ukgIfZudO4QgZfrxTlLZdDhy9FtXueD
Cbz7H+MY9RUd8tNylydcIudps4iLH1/Twcm96OCqKAJfiPoVY5VDh0Fld/tr
9wj8cu3RLI9c8v3HldobUwj8Ka64gHhHh2s6MW2vMghcx5OpDH9PB91rLJnv
bwg8/TS753E+HU5Fbb6pXURgmem5Yf1C8v0I6Y/7ygisu2s7/4f/6HDv0JSi
VRWBtwtzNH4V0WFX4cdVK/6S8dgRs5eK6bDxcWzo8yYCC/xY0mxWSvIgSH5s
J/DBnHcFnV/oYB9oPxjcQ+D8e9se3f1Kh6UWjotr2ASWP9l9ckMFHUYOt/vW
cQgcuO+c81Alqb/Z3d4zg+R8v3ax+bMqOjRu5b9QMULO81pZ8o4/6PBn6odR
4TiBwwQ3DfHV0EHOILbbcYrADcym2je1dFA/NpUcM0NgetWxbPc6Oly2SNkT
Mkfgm68X3ZL9TYenb1aKTcwTmHknxb/4Dx1yp013y/EN4g2hq7eG1NNhkeSR
p2dITtzzy0DrHx1uqCR65JE8vtpP9Gcjqb+F7uMSkh00BZgXmunQpdxq/Yzk
LP74MlorHbz5dP13kSzSa/a8vY0O24tzpN4sENi98tul2x106HmRu9KVjF+Y
5eGOuujQ6aTo/HaWwIq3p9YT3aR/A08CM6YJHHLsrsaTXjp0JGlEWk8SuMqZ
OmvPosNh9QMvro+R/liWNM2z6fB4wOh38DDZD+r7CrL7yfPC3l1llkfgpoXB
h64cOuRo155fPkBg8+7rJ6V5dIgtcJATYhE4plzLuYigg+Qn3Hyhi8B9GfmM
oCE63Jyb7H/aSuDkEPZg9SgdtJ9skf39i8CTuy7Who/TIWGbllXPDwLvWqWS
vXySDn+v2c7GlxNYbH6L/60Zcj9eWbZ6Kp/Anp3ttuvm6PDTM5319C2BP5ed
MuDOk/qVKR/ikf14LDq9106AAZv3BBqce0zgH0GobFaQAZq/DZIK7xBYf2dD
yithBiQsOY+eXiNwi4qou6Q4Ay54J59wDSXwljSfpu8yDAhkK3zKsCVwyo35
/HNyDLi5MJepsZ7AswEPHhotZoDbm6xcC3L/5TLKnaKVGNA4/inWW5XA6iXL
ardqMMhmLYh72M3DJ1M/v57WZMCHgtYVNn95uO6a881MLQYMVxioPivn4Uj7
q7aLdBmwGws42r3k4cHmni/fDBlQ3ft9563DPDx8XqfkgDEDon0TNbL28PCo
tmcRsZwBRumnC8O38PDk4fZ8RTMGfLviJ7FRj4f5Rhtfe6xiQLrHwfhtHVws
K1n7cGoTA4RylbbesOZi+RypuJtWDBgNVY8Vo3Oxwk67e0u3kPVe/XcNaXCx
yqNvN622MmDntMmav8McrKVbdumuAwPkFgc+eRHPwaZrC/ypBxlw3nZGTqJ1
ANPbJ3w/uTLgzf7oJ5plA9j88kqfHe4M0D5zx4ObOYAtKt+5n/BiwI1p8pw9
NYDBKdu55AgDzt2Pk6NJD2CHgOdo30kG3A62Kbpr0o+DE28tvnGbAfI5K6hb
EBv/4Ncltt5lQHuF++YANTY2PFxYJXmfAa5JX0atx1i4x4x16c4DBqxf3d6h
mcnCeytg8GESA5L0uzIOybLwxuGRH2lZDCjgLR77WNuLlWxcIssqGDDfO9rU
pd6Nj78e9Ij8RuZnKeGcQXThn/LX1tl8Z8CS6m97V5R24ejWd6PfaxggctmZ
9tSnC/Mdl/L6/ZcBPaVE0s9Xnbg/qRh1dTMgthXa1GgdeIvgniWpvQzwjN0R
ND3bjlN9ueOHWAw4PfPY9UBCO3ZjqGX39TNg0u3+29n6Nvyn8rj60BADFkOo
50/bVmxmsmgyd4T0i6m94WlvC465//R36BgDTGJb+pQutWBb1+qoyUkGnH2w
PnTuQzNO++LlUzhN9of4wNdgx2YsRJ3eEDZL6uWeXnJroAl7xNzRWD/PgMQ+
0ZS9V5tw0Yje1MICA6K8n6XUaTbh/wH6L8uM
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
lKD3gPIsutEx6mVKcu6xzITRNbModJBRlHeVju4c3vJuwWYWHbp14q0FyaF7
O/8I+80i5sgGuZloOnLfdmFR7uos2qEs97KC5B1rFTXVM8j9l36Z5ZFM0c/f
aVQ8izos7cPfkiy/yi5gw59ZNF2cvOsXyfMyRJLF+Czam5V7QIi8v1cgvshO
Yg4l55b5HSK5alan21mX5Cq5HRUk53K+8ftun0PhD8Wzd5P+3ul11w9xmUMv
GfqOQySHNi/ZRJ6fQ9mjcvwZZLzuP1LOXL8zhx6x75wNIvXYUbI+5eHrOVTp
m+p3mNTL6G1zWdbPOfRfhWWqE6mn7LNTjHf0OURcb/92mtR77r6UeCn3PPrI
9zv9GZmPqohdB/6snUfaDXn2e8j85Z5mXOy3m0chI5Ep5WR+7xyPejJyYh7F
a985Z0vm3922hCOUOY/w+uLvr5JJ++aHZeXwPNLTTM4KJeuHsn56vVrrPLq5
Zj3hStbXvCr1ynqpBaSviWK8H5F6yNa9NNdfQC3b4yHuMR19F/L7ZWuxgJSF
zul/eULW/8jT5T6hC8hQ28HZ9zkdGZcqvX3AXEBRjjZuGW9Jvd9/aHnGu4jk
qsr7juTT0UKW/cLblYvo9CJDTL+Ajn5cT9jx02ERiaS/4poppiMPF+6uudJF
lG3IJ3roBx3tsk/jE2pfRJPBKzzv15D3W/6nJzu1iJL1HuQxfpH+Gp0+bWC4
hBKchArzWkh/FpmiR+4vIZpm/Me+AToa2OO9omsdF0ztmv8by8dAshV+mpfM
ueBzTdmznUIMtHXTSQMVOy6okrkSJCXGQOn65zce9uUCrgv5Ne+XMZCTULxT
SyoXvHuxemyvBgP9LstLqePhhkf/7inFbmOgEtOpFaXV3IDu1iw2XGEgdvac
pstfbtiufypmMoaBVmhwGS4OcEOcwatu+UQGOictvGnjEjfw8K96uvcuA5ly
lI8UmPBAT6WLw71nDPQya3Pq67s8kH0rJG1jBQP9Xbnt6d4nPOD+Kfiy7A8G
Erpr+YqTxwNhigTRX8NAR6Nsig2+88DRl/Hy/k0MpOrm3vF8jgceeqq7KPYz
ULJytMpjV15QZ78PiVxioMm+2qw9/rwg9fzoCm5eJnJ4pUCdv8ALWXva6wIE
mEgGXljsT+aFn3ZOxSvFmSj+aHWAeC0v5Jw7uOajEhMNGcnNFrXxgmVpcf2b
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
eq/diQrrt1tq6+xiYdug9898nKmwwePiJis3Fj6vaf812o0KVuYTThWJLFx9
7cZ8yTEqCJWKngqls3B3T5eI9XEqdFVa1X2aY+GJDRSlNh8qKC6WKeVLsfFK
ds2aqRNU+HfdJK9xPRuftBUNoARToUb/6/kv5PwU/fLQxeLTVGgRe9r78yEb
P+B9Gbc7hApcjvT8hFw2Ls/f8fzYeSqc6+8ZXN/AxvLK0T2PwqnwQXlLMUWJ
g4t6uRykEqhgbxcx75fMwbX/2binJVIhsHP6wOBTDu5LehRocIMKCbHvUpe/
52Axy80JO25TobzUd//jOg52yb5QEX6fCrfM4qYMeQkczPezUeIhFaYz2+Yd
yXnz2hHlvpQUKoz55gxTlxP4rWThUsEjKhi4tC4TpRKYL3hy3ehTKvhZxNwz
cSKwYo25ZVgWGd+CELFwlMCGWnccxV9Q4TQt88ilAALv+0ML0s2hQvUaSZ2H
EeQ8bRIZ/vEVFbSvLD+wNpbAYbG/E83zqDBb9nnH1VsEfr7xZLbbWyqcElRb
sTWDwJ/vlBYS78h4l3r/5LwgcD1HsupiPhUkV60T+fmawLPpuf33C6iw7Edc
tFoJgSVnF8a0i6ggE2j75mA5gTXtrbk/fCLPl62TMv9BYGt+lsrvEir5/R43
WdNE2mNGzkeUUsFWuN7/SSuBeaqXt5l8oQIjJ0zgYxeBj+S9K+z5SoW+ghtD
Af0ELri1+97Nb1TQuZAsXssksMyZvjNbKqlgGKrrUc8i8ImDFxxHq8j3kNHZ
dW6EnO83LjN9/IMKo3a25yrHyXleNVvGtpoKZYkrtYomCRzKu22Uq5a0J07v
sJ0hcAu9te51HRX09++6nzhHYOqPoFzXeirINY3YBi4QOP6VSIJUAxVUmBE8
U4sEpt/I8C1tpMLIeQd7aa4RvCV4w67AZjLfG2JTz5Gcsv+3juofMt75Iuf3
JE9u8BH89ZcKnspb7paRbLOShx7WRoWs8Oltj0nO5n5QTumgglLeZm97kgUG
TJ50dVJhzn9A8PUSgV2rvkdc76aC/5khY2fSflG2myvqpcKfWpu9b+YJLHd9
ZjPRRwXU1XXsxSyBA4NuqjwaoAKvhHu4xTSBfzjqzu9hkO/3deajaxNkftaX
tS4yqRA/GVITMEbWw4qDhblDVKA358rMcwjcujSS7MyiQtj4ynOGwwQ27bt2
RoJDhb+X0kX5GAROrFB1LCGoIKAi0RzWS+DBFwU0/1Eq/CzbPpDeQeC0QOZI
zT8qHH0UJ9Lwm8DT9uF1FyepkD7lgvqrCWy/VjHXcJrUa9OVyQcVBBZatPRN
mCPf70kn05kCArv3dO3ctECFBZvOnvQ3BC4uD9FhL1Ih4qaNC4esx6C4rAEr
Hhq8j89Vv3CfwNX+qHyelwaumgHJRTcIrG3XkpHDT4Mddt/Xp18lcLuioKuY
MA3iQkcDnIMJbPnMq/WnJA10/hz/8GIngTNiFgsuSNPA08XmqcpmAs/73U3W
X0aDs8WzOevI9/eWVuEQJ08Djwa+655KBF5RtrpulwoNsq8uXk/u4+AzmcWv
ZlfSIIdXy3hHEwfXX3WMf6lKgwGeM8seV3Bw9J4rO0U0aUClHN5t9ZyDR9r6
v37Xo0HyPZp1wjEOHrukUeZkQAPJeT7F7P0c/E/NvYQwpMGTqe73Fy05ePpY
V4GcCQ3ajtfxb9XiYK5/f1+5raWBi0xB0u5uNpYSq0ue2UaDiz/jtsdYsLFM
nvideHMabEm5myhEZWNZO6tbqyxpcJJr/2WkwsaK977Hm++iwYzJuzVNYyys
qllOSksDU6uR+08fsLDxxkJf3SM0CEXhYqIdw5jaNeX92ZkGjwfkHqwsH8am
l8289rrSgLZOzYn9chivq3rnetqDBv+ap0KKQ4YxOOQ6lh2ngcqXrWIUiWFs
4/cEHTxDg7Vm4wU3jYZwQErCspjrZD7KlmtaIiau5tYkdt2kQVSwBfJTZmK9
Y0U/xG7T4KPcC8JigoH7TRgRN+6SXFXRtvIlAx+ohJHkVBrYXe7KPCrFwFvH
xqufZdOg0mnTyMe6ASy/41B0eSUNHslsbO5d0YdPvRpxi/5Og6dJyOYF0Yt/
yVzdtOMnDVaGDNiv+dKL4zre/ftZS4M1e4310r16MdcpcY+GJhqozWnf+5XT
g4dSS1FvHw1e0f60KFO6sSXv/uWZAzSoGkl0m53vwpne7MmjDPJ8BmHr9LAL
u9CUcweHaKDAkH4639yJG6tOrRgdJfX9xXb8tbMDmxiJTL8dp0HnQrhp+kA7
Tryd3hA8QYNlSgod8hHteKdzTez0NA3eSsgfW/jQhp999fAqmqVBpsfVggDb
NsynO7sldJ4GX5bxv08YbsVuiTdUNi+S8dNXJx240opLxrVmlpZowN4YkVS/
shX/DyQlsSs=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{0, 20}, {-1.002571963940836, 1.0046340852457114`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6061089938216157`*^9, 3.6061089980676355`*^9}, {
   3.606109089559267*^9, 3.606109123693939*^9}, 3.661398162115943*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nekateri detajli dela z matrikami", "Subtitle",
 CellChangeTimes->{{3.6061091452716646`*^9, 3.606109154766943*^9}}],

Cell["Vektor", "Text",
 CellChangeTimes->{{3.606109349134865*^9, 3.606109349886368*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v", "=", 
  RowBox[{"{", 
   RowBox[{"x", ",", "y", ",", "z"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.606109353385225*^9, 3.6061093985458436`*^9}, {
  3.606109449440591*^9, 3.6061094589293613`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", "y", ",", "z"}], "}"}]], "Output",
 CellChangeTimes->{3.606109399128225*^9, 3.6061094594447155`*^9, 
  3.6613981705553465`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "v", "]"}]], "Input",
 CellChangeTimes->{{3.6061096071923714`*^9, 3.606109613526723*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {"x"},
      {"y"},
      {"z"}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6061096138909817`*^9, 3.6613981718708444`*^9}]
}, Open  ]],

Cell["Matrika", "Text",
 CellChangeTimes->{
  3.41381560978568*^9, {3.606109390811967*^9, 3.6061093923980894`*^9}, {
   3.661398172972028*^9, 3.661398175341817*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M", "=", 
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"J", "0", "J"},
     {"0", "J", "0"},
     {"0", "0", "J"}
    }], "\[NoBreak]", ")"}]}]], "Input",
 CellChangeTimes->{{3.4138152550255594`*^9, 3.413815269726699*^9}, {
   3.4138153385456553`*^9, 3.4138153505128636`*^9}, {3.4138154348541403`*^9, 
   3.4138154360258255`*^9}, 3.41381560978568*^9, {3.60610941517028*^9, 
   3.6061094319451513`*^9}, {3.6061098763197174`*^9, 3.6061098774284925`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"J", ",", "0", ",", "J"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "J", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "J"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.606109432956879*^9, 3.6061094614961567`*^9}, 
   3.6061096163887568`*^9, 3.606109878175005*^9, 3.606109954808326*^9, 
   3.6613981766769047`*^9}]
}, Open  ]],

Cell["Mno\[ZHacek]enje matrike in vektorja", "Text",
 CellChangeTimes->{{3.606109575659753*^9, 3.6061095811091413`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M", ".", "v"}]], "Input",
 CellChangeTimes->{{3.606109436515402*^9, 3.606109438442763*^9}, {
  3.6061095982983646`*^9, 3.6061096237249813`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"J", " ", "x"}], "+", 
    RowBox[{"J", " ", "z"}]}], ",", 
   RowBox[{"J", " ", "y"}], ",", 
   RowBox[{"J", " ", "z"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6061094387399917`*^9, 3.6061094622276745`*^9}, {
   3.6061095823600006`*^9, 3.6061096241132507`*^9}, 3.606109879977289*^9, 
   3.6061099575953045`*^9, 3.661398178649349*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.6061096271744266`*^9, 3.6061096282181997`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{
        RowBox[{"J", " ", "x"}], "+", 
        RowBox[{"J", " ", "z"}]}]},
      {
       RowBox[{"J", " ", "y"}]},
      {
       RowBox[{"J", " ", "z"}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6061096285834465`*^9, 3.6061098828863544`*^9, 
  3.606109958483937*^9, 3.661398181824159*^9}]
}, Open  ]],

Cell["Vektorski produkt", "Text",
 CellChangeTimes->{{3.6061096341784067`*^9, 3.606109636677622*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cross", "[", 
  RowBox[{"v", ",", "v"}], "]"}]], "Input",
 CellChangeTimes->{{3.6061095846646385`*^9, 3.6061095850459404`*^9}, {
  3.6061096445309963`*^9, 3.6061096865576863`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6061095854602222`*^9, {3.606109649551569*^9, 3.606109686890922*^9}, 
   3.6061098851359744`*^9, 3.606109960114116*^9, 3.66139818453959*^9}]
}, Open  ]],

Cell["Transponiranj vektorja", "Text",
 CellChangeTimes->{{3.606109796961397*^9, 3.606109806152841*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", "v", "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6061097341032543`*^9, 3.606109768466888*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"x", "y", "z"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.6061097376929216`*^9, 3.6061097689212036`*^9}, {
   3.6061099316985483`*^9, 3.606109961638199*^9}, 3.6613981879103584`*^9}]
}, Open  ]],

Cell["Transponiranje matrike", "Text",
 CellChangeTimes->{{3.60610994090231*^9, 3.60610994451443*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Transpose", "[", "M", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.606109811746394*^9, 3.606109818264511*^9}, {
  3.6061099466689863`*^9, 3.6061099475571995`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"J", "0", "0"},
     {"0", "J", "0"},
     {"J", "0", "J"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.6061098188669405`*^9, {3.6061099327272944`*^9, 3.606109963484493*^9}, 
   3.6613981924611673`*^9}]
}, Open  ]],

Cell["Inverz", "Text",
 CellChangeTimes->{{3.606109970608591*^9, 3.6061099714261737`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Inverse", "[", "M", "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.606109835238597*^9, 3.6061098488255577`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["1", "J"], "0", 
      RowBox[{"-", 
       FractionBox["1", "J"]}]},
     {"0", 
      FractionBox["1", "J"], "0"},
     {"0", "0", 
      FractionBox["1", "J"]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.6061098385380754`*^9, 3.6061098496271286`*^9}, 
   3.606109934379488*^9, {3.60610996637255*^9, 3.606109974534351*^9}, 
   3.6613981951982718`*^9}]
}, Open  ]],

Cell["Lastne vrednosti in vektorji", "Text",
 CellChangeTimes->{{3.606110022200696*^9, 3.606110030216282*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"values", ",", "vectors"}], "}"}], "=", 
  RowBox[{"Eigensystem", "[", "M", "]"}]}]], "Input",
 CellChangeTimes->{{3.606110031771389*^9, 3.6061100615214844`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"J", ",", "J", ",", "J"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6061100371757946`*^9, 3.6061100629374857`*^9}, 
   3.661398198297621*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["values"], "Input",
 CellChangeTimes->{{3.6061100638621397`*^9, 3.606110064650733*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"J", ",", "J", ",", "J"}], "}"}]], "Output",
 CellChangeTimes->{3.606110065155079*^9, 3.6613982036944776`*^9}]
}, Open  ]],

Cell["Determinanta", "Text",
 CellChangeTimes->{{3.6061100786889925`*^9, 3.6061100802210813`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", "M", "]"}]], "Input",
 CellChangeTimes->{{3.6061100814729805`*^9, 3.606110083331293*^9}}],

Cell[BoxData[
 SuperscriptBox["J", "3"]], "Output",
 CellChangeTimes->{3.6061100851734924`*^9, 3.6613982050301003`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Prikazovanje rezultatov", "Subtitle",
 CellChangeTimes->{{3.6061102898737907`*^9, 3.606110293430717*^9}}],

Cell[CellGroupData[{

Cell["Plot", "Subsection",
 CellChangeTimes->{{3.606110751859401*^9, 3.6061107534233046`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      SuperscriptBox["x", "3"], "-", "5"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.606110294858731*^9, 3.606110317114377*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJxF1GtLk3EcgOEddFqWKbpQK3MuC1ke0CJLyTXmqVSYozIxLc9I2VNZ05nC
TDFRcAw12EpFXzgnaqcpyXJTlz1DzWAQiiFOM5k5lDm35ZZW0H7/FzfXN7hp
OffS8kkEAiHlb//MHRBu7O25qByqmo6djLYjj2KyzMdW5NdwtWZ9E5n4xtI1
p0OGyrPS344jrcOnRwvqkI0TuGjaHRngp8M4+yggFsPlBFOdwVvd5vjJICdQ
kcrn0QPJoFZ9XTYTRgKv8qg+EcFEsOyBkyTrFAHsLxMzR+7uKh2yatdVjDw7
mBpmjLtUuQNKijO219qtoNL/qR9RbAYzsGy2ctAETl6wL+tlRrCq1dYnlW6C
nOM3f/mLDCCXzK7+KNCD7ECRt2JwBdRF3BY1iHUgeWpNQ6HPg3SpTtAq0YJR
M+9or5YnwObVAy3TLf1gdVyhR0d4X6xDE/WhMrv6E1gw9FzWy9GC5YTStkc1
8yCLlFvKw3XgDc0Jj7z6FVDdlq/iSfQg83xsYXSRAXwx25P5U7gJjkm2mpJb
jSA2Wj/iXG4CE0uyeWk1ZrCnUsCw3LGCuI0pd0neAT2JTE0v1w4uFTXMdkft
ghsMt/dH6ASmw6mMdsw3iAgahueCxqkksGshsmPQjwy+jDzjc83dCTTHkisY
v5HfDxk7LxMo4GHPOpxqRDado99PMSNds5S+tTtIm8xSbCK5gIvsooNaL2RP
WVKa8CwyZtHt2/5ypJwirWFVIkND2CF8AZLGf1Klr0dSvA0BuBj5JeFzfq0C
mVRS7P5BhRxrpgyZ1Ei57qJr3jRSXDEgYy0gvTqvcPlLyEZ81fb6B7KKGpBC
20BaohXb6VtILCe9TWhBrj0zxeM25P9vgX8AA0VQww==
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwd13k4VN8fB3BERDHcO7ZvQrKEaCGSOoNUIkqltJCSihIaW0iyJGRfslT2
nVDIknPITmVfkuzr2BMi/O78/prn9bzvfc+5cz733mdEbz3Sv8PEwMAQzcjA
QP+sCTsewXCaCSmpU5qw+f2otfJy+nd5JkStt5AugPvRJXsy/8G9jGhn+ML3
zs/7kIMNc7SRJAOizYTcAPbSKNshilL2cAP6B8YKVJRLInXPKSRj+g92lAUX
pciKI135BU01l1WIfZa+Z4KJoWjzq38m361AowenhB3PiCK4y12QMWoJqq/b
SZqdFEZbA6UxavAS/FlXwiB0VBjpMLZwjPksQYZFqmmPvDDqGhJZb3RagvFg
X7mlgDBaSC3re31jCVIbsJezU7uQxKHVxP2iS5BkmSZ0OWwX8jtlLX8z9Q/M
SHLOzaQJoatWxidgwSJM5ZkHw1k7kcdQ70xA9iK8Hr7b8m3CTpRtcD3yZvIi
XPWJLb4ZuRMxHjOcYQxfhFJNKXHrHjtR6rYLr0/YLsJF9pmzr6/vREvxJ6fq
Di3C5ZMZero7dqLg9n2hbTm/YdiGw5Nk6n+oQeXf0ET6ArwdPeh24aogUlHe
09cfvwAHJKUWdusLolRFnR+dUQtQ8JvOo79agshrf0xTlc8C3JXI7lFyRBCp
S6h+jjNfgLxCRytCBATRJ27ncEPpBSju4DEe9EMAJY6vna5Lm4fZLrfC3psI
oKfha1mpqXOwRihSsdqdH926dVhLOm4ODpt7HMl14Uen5KyHMyLnoK+qYkGc
PT8iVY8KvveZg15e7KQQC36U8Kf5Rf6DOdhh6shQeIEf1V5MNanYPweDa8iZ
jOL8SEIiXfqT9SxM5cinBTbwobnPwiYlt2ahGem8mkQ1Hyq6FBZRdmEWXr3V
gBDiQzqez5irFGfh5tanh1gK+JD1sMGv5r8zsI6pOb4hlg+Vxm8JprnNQGm1
nmc69nzovPCNv7uCpyEFTi1vl+JDg8XPQnrdpqG7ocixnt18yMYgcV+M9TSU
Vzqh/F6IDwW/opkInJ+GMyo1GvcwPtSy5liPkaahZmfC5V2bvEi/KzyazX8K
Sqwz5UV0Eg5qOrbwkgblGvNl0vx40aDsYmeOIw2envfilfLmRTa1fDaP7tPg
Ie0Y/Ux3XhS8aZQ8dZoGE/7byK18wotaHk5zjrHSoGz8i3yF+0TfGfb+Hs9J
WNi3zsl1ihdd2HLieZXbBNxFa2WJ2MqLvh19dT3SZgLGt/GWrTHxojPUjsMP
b09APQGETDfJSH3kHg3XnIAJe9ijNVbI6GDNq4umbBPwjUHPNYVJMiL5dkps
CRiH0l/Mm/u+kVEjj0UDJWYMGkQyJepEk9Fp7Y9J+KsxGGyq9FHxNRlVuq+7
jruMwT7OpdLdYWRUshigEGg8BqWs27PYAsgovePjm77dY3Dc1alqizsZeUdt
PHqaNgofmNwI+GhBRid2B+OlBSNQgetY0gwgIy+jl/raySPwv6Y2XsFjZFQX
9SzwR9gIFD4Z3aylQka62KPtf6kj0DfwPblAgYyuMOswHz40Am9eaXMu30tG
FqMsi+/fD0MTV+aZWJyMgtMdWxNSh2CiZ1aIxTSO2katuA+9HoJ+tt9+CtBw
xCd2T6/ixRDkwFa2No7jKCbaoKHfbAj2h92cPzqMo2S/Q1+ExIegDvXOF60e
HBVbTudFxA1Cf2MFd8F6HA0cNAn2jRqAGWfC0hzTcZTtnmF912cAWkR+uJuc
iqMnbX/OaTwZgPPaOU87knGE2flwrRkOwLgfC+mUBBxpFn3wMxcYgI3BRsmq
MThKA1tfaL3uh2RSv12TP47sAs+ZiXv3w4p7p88feIUj9YEoTUaHfui469SF
MF8c9TyXZy663A+vv8svN/PG0Y7qK25SfP1Qhsa/IPccR4OvDZY5Zftgng7b
7Hk7HDmp0PKrOfrgGw2V5iEqjvCfrtSntF+wO7A4zeExjk4Kp81Pp/+CIbIX
D2RY4Sg9aY3WuPcX1LuRdeKQBY5s8mL7fSR7Yaoma33jTRxtaZys2yrWA0Uo
HZBLF0fUlHq2CeYeeM3/0er2szgafp5+qmH0B9yQvvN4uw6Oqo6YVwWk/4CZ
Xqa8PGdw9CJlAvEf/AH5zmT/UDqJIw738UJptW54H1eXpR3HkbNR7dJ2sW64
u9xbhIPw1JFUxVnmbkiKlJLZdwxHX+fufvhQ2wUR42NH+6M4CjAay1Y91wW7
lPd93KNM/N4qo0m6xp1Q6jyHTd8BHHmQq4f3q3VCyt6v74QJL84liWFinfD6
tpESk/04ak+5E9c52gGb+XnzaXI4iiCPxNy07IA7l+3v8Mri6L/5oRAbl3Zo
X8npXymBI7/GLy0XjdthU6iA7W7C/1ISuJXU2uGalv3u5+I46jW6HbDG3A5X
IqWrT+7B0bvGQR8Pvzb4T9+CNiyKI7HUAbfw6FZoqbrXxUYIRyK+Qt6zT1ph
bkrRxf6dONplaeh/+mortDbgxs4RFlRojlrlb4Wh9QZKiv/hiAehD0bhLTBg
979KsgCOGLvejUgENcNclXLpfWQcbRT30FytmmF9ve5cIU6s7w3fQpdeM2T/
nnj/BOGV2wEbPpzNUO7ZpPktDEdzs0/5Zn2boGzUW908bhxBrtJgyx3f4VWD
4qa3nMT8tx96J9L4Df4hX7moQbggOiOjxecbvPUEXpnYQcy/ZHTlYbZvcMBF
pvMI4bfgydIG01cY5qFyfooDR1EsC0y55Y1w3nXMLYZweMN9rtvPGqHdp18C
uoRfXTaUqllvgGL7pmzy2Yn9f6R8NWClHh5W0bQK3YYjB8UcM7XCerh5aOtz
PcLUNcnHv23r4cktwQMchC1e8Pld/l0HHSzPuHiz4ejqu6XPwjO1MNyP4Vsg
K46Uv38UzRmqhpxBwew9LDgaYvsiV5hcDYUuW5RkEvZXbz5adr8aCqys3HKl
5/nTlxpnq2CLbYuvJD2PkfAZX6uEpB0/154zE30dChGzZZXw0uUigeuEh7g0
EpfcKqF9i4/AYXrublzGzFYJ9bamf5zaQuT3Xy+I4F8gN7cSyZSwf0LypmRn
BSQFYH80CCv3ftwuH1UBf4WIpeyh5+eaJY6JVMDeny73xplwdESJ/ZqhbDlU
FHDkcyQ8bMV/7+Ysgo+f6AkZE/ZPl7C9m4eg1afXPZr0XEgjwFYZwVhbMXsy
YaFtK15iL8tgXJz9QCkjcT8743EHuMpgfJj6rVTCtbP7S0DYZ3ihFHqF0vOO
+7PX4kphqY5VjiU91/LaZi5ZCud8H+dcJyz0OV7MIasEfk2t1dKm5wk9l0OL
iqGdBNtxacK7+Fas40ExRNcrQgQJP/bB/XKqimDaf5YOHPTc+ixqbP4EL/06
MjzDQOzncSjFMlkAe8QY1ksI1+f2qGNWBXBOO9Eth7Cw+Mp10aV8GKHv+CyJ
nnMcCDrGlA/9ky8NBtJz17MZ2t4f4bU6WcoLet/C/SpDzo8w17Ztx1N63h3/
11bwA1wgK848oOc6EPOIzYNX+j6vmdL7YM++YIk8SOktsLxBz5PxW9kHc6Gv
aOQTPXoucMC59FMOfHBMn1OL3vfqbHj98RxYrfzfujrh0LHtYV/DsmGfg/OA
EuF+XvtfH5KzoF2N3+RBwjInBySjCjOh2oCimhxhO1tt62e1GZB1x9ahvYQr
EvOLzbrTYVCQ71dxwpxtwsxnJ9NgWv7FDVHCV7f4nD20lgoF0KzNLsLzJkb9
mztToHBCmxA/YdWg2r2j+5Kh1rajemTC3ujg48bjSXDaKrOYh3DbbExpnl4i
bBcpvEEiLCLMujXyZgJsMJ5Q5CT8QNdaz9U6HoZTmynbCRe69Ly+8zwOMiSv
O7ET3pKlOagdEgtbVP4NsxF+88n4sunpd7Dd8ZojK2EFPoXJ/eZvYEta2uGt
hBtt2VzWfaNhMLetIAvh220/ueqzImHfsvZuZsKrB3Pjw79HwGcJpdpbCAcH
eSreng+DlGuXQpkI750zrJXHQuHoncS/jISRrty1fwrB8Bi7siPdV7KYZmoN
AuGOgLckun/xZTPKzPtBkaNmnxkI72g3kKxUeAmPXRJyoVs1eFPnhoMnlN+j
f5Zuc71Um6USN1g2EyxD9wGB+P3Cm07w49pDMt3+Ib+dzntRYXeQNRvdHf/5
+LP+Zw6XlmWY6BYRvXqmS98AtlOJ0wlntruKPlE7Do7rbWxubmJojeVVVn3R
LbD29eD/Hctmy/Gh3Qq0KV1eo1vDXww903UAIa1/5+kexVqoujWugGE8tZ/u
Sh2Ec8a6g5GShUq6wwP4ZqnXXwD28DsxdN9tsazr4fcFRz4HmNKtTK5OUG/3
B0cdNgXpZsnkhG2ng0DXDo3PG4Qtz6rIskmGgB+V46fp7pi5E3mUJQywDz8t
WScMAoO2PhoKB/vzQnjoTj3w+XF8+WvAa5ev/Y8wqXW8v/1dFPC0szFdI+xI
xXW3PY0BJ1evXF0lPEimlKhefwt2n16W/ks4qUcRVxaKBYPJPa3LhK9mNtSf
3x4HdG+E6i8R5nQxcbNYiyO+733iIuGKs8tKnpPxQH+qpGaBsN2uVzNvuxOA
k/6pojnC0rO7kz7VJgI7mX67GcJ98NO1lsIkwF6Gb9AIhwbq8kwlJwPG8491
JgifNhmuZQlPAeIyPsajhP8deOIq7JkKjoWMKQwRzmEiHT5CTQN4k0B9H2HT
1qQp/dvpwEbq/c6fhAUSjyY80M8AIkOK0l2En2veJcXuzwJBUecefCfc2L3T
b4tCNniQ0iVfT5hs2cJ6V+k9yPG4Gl5JWJ6xUu2OUA5Q0i6MKSN8seHtJu+7
HNCDNYFPhB3CHD/XiuQC22VP51zCb4wvOj2JzwV9nMV66fR5+L1tuTcpD7xS
Fc2KIsxeNvwxQPID8PDgPRBM7/eGNmppH8CH25zgJb1vp+1MYuZHIKztM2VL
OGZUL9NALh+QPJs8LQiX50ibs+Xkg7iiNzE36X2a/SMWHwoAq935w1qE5bhK
EoQUC0Gg/GqeKuEL3WEm3wsKgcip7Fh5et9D7d6DxZ9Aye/SCozepyQRPXy0
CDwp7p5jpq+XkdEw/HMRSFb3cv+zQawvvKDtLyoGeas89W2EL94MCs5QLwEn
rufbfyHsIP3g3I3KEpA5aOGSS7iiTLQR1ZSCW+WRHr7048f8vrz4VgY0nkZI
K9GPz73rduQcBJfKHNVECL9xUge0Zgg4Jh0i2Aj/ZnW+kWKOQMNd/cWOdQyp
xhzoZrcsB48+kgTNCesyCn8ayi4H9tscW3QIm5htjyidLQcLJNZcOcJe+8cu
WlpXgNQo/rbZfxj6XhnT1Ez9AibP5Vy9S3hwr8/79PwvwHh+eEqd8KK/vb/7
0hdA5jjtJ0SY31BfR9GhEmTv2DX6fQ1Dt6ZZa187VYH7rKnZUoSp+n+SrUur
ANo7q/9vlfi+wkHPM+tVQMrvIe0b4Qy3zxr/nlaDYGrolBXhRfJjaPy8BsT6
7u1K+YuhK6z1b4bKagC1yfKaHeGSFRHnu2s1wO7IfJ8G4ec935QfUWvBJzvv
wZ4VDHHFSec9NasDAmHrXpvLGLIJdgtkSqgDGgtSX6sId7h3WXr11QEG61MM
voRjzLxk/K/Ug8lmZTEewtKyg4lvzjQAA/5JHFvCkL/QEXfRFw2AwTHDqekP
huY5A02SvjSAhBVyiR/hT/PHdmWpNgKvC+VFjIQ1CyMjSuW+giRLy0e9vzF0
U/28Tw/Pd3BxfpuH4TzxfDuUes9Y7ztwEmTV3EJYUnzz5JDvd2B2Q6AgYw5D
y+4dbrZMTUBZ/srblVkMlZl5HHdxagK5f49Sns9gSFu2v9DvYTNgG3AP0qcR
93ciR8o332ZwwdVZbHQSQ9lCSuGk9GYge3BJ1YEwD5c/NXS0Gai0nfoXMYGh
rvmjB2KMW0Aqg8mdqjEMmRVGpGecbwV9ufpp7UMY8pG622Jn0wqqzhw4pUk4
O/LwqlpIK2jER1bzBon1ObVrdbW1AseVgXDvAQx5U7AJ5ittgG1P3cmdfcR+
1vlLGhm1g8wjnB8GuzHUpGKkt9e1Hcz8bpA+SHgxY5/94rt2oN2U7+HaRcyr
f2O1z0A7CM0Qa8E6MfRNn92s0LQDCPAwOO5uw9Bcj2ciyaITxDY6i7V/xRB+
9lJjj28nGC30VmEkrFy2ZzE5sxOoFfAxyDRiyC32i8axmU5gl9r20r6euP47
jEP3rbtAoPetY4vVGFKYcRb9Yt8NVO4EnHeExPOcgfrW1qMHrKwfDo3OJq7/
9Bv3lMQeoN6YH+6chaGowOp73ZU9gDs/7e/VTAwViwgcOsbyExRe/9TGlY6h
VUpZDbPXT/Aud+SlYRKGnN3Y5kNe9ALnXvET5tEY8qs70FGV0guaea/0CUcR
88Z9rWS5phckeAilt7zGUGlcluc1tl9A1WNvhXw4htbL9QXFXv4Cxag4uSYQ
Q0+Z3mjk+fSBZ1F3wyw8iXk8Uy01nN4HqL/kShbcMfQueHYHb0Mf6LNK6bN7
Tswbt+hUKUs/CGWl8tu5YuhZ3OMCkZP9YDVt9reeI4ZQOb/2eHU/OC/Hm2z5
AEPqTLep9rUDQDVYO1T9HIaMtrVIOHUOgMTm/hV3XQw5kdS6n44OAB7KOYsK
HQx93CV83It5EITxtz46rIUh8aM9rGGUQWBYtpG7qoYhNuqF6LxPg6Bsx9vZ
+YPEfo5oVEynDgFTjad/XvJgaHIqjzpfOAQsFotP3SNhiHVRVPJP9RCQ0XK5
osGJIQoTg9+/4SHwSCc1Y3YbhnJ3lV7iEB0Ge9C+VhFG4n13WWFCKnIY7HuV
vDY4w4MM6/aQTF+OAAHN5svtNTwou3HEKDNyBKRyvDrCVcWDmJuSsxbTRsC7
CJ+JExU8KKdDStuzfgQwWSSlJJTyoK3Dsl7JHKOAMtOiIZfLgz5uKPwbfzUK
inralGwjeRCngub4w+AxELT2fuqDGQ8yVdqqVBA/BpRuWtmZ3OZBxSo1nht5
Y2DPsOZ99ps86I6allhA6xjA831cdA15UKnuWaMcfByM319kfafNg+7fv9S2
ED4O3EK5+o3keVDl2zvIPnoCmIfHOmn85kZyLIzf09MngKE3mo6a5UavLWJ6
e4smwAQZZ5uhcaMHyq2rGl0TAHu8XebFMDfCWyiKJPIkKANg0KOdG91m2Zme
6j8JOh+HtWcUcCOmBy0h3W40oNVy8nuYLXF+y8P47UE0wMKtrHPDmht1KG/L
BbE0UGRKEhZ5yI3SWSjfkspo4FCxbGmEKTfSf5fFZrNGA9GS3H66F7hRXIu3
C7vtFEi8Ya3eJc+NKEfA3aP3psG38ma2MyMk4v/8izZR+2lwQNg7MaCfhBh6
v6uxeU2DYPYs26YeEkLPbu5sT5gG6S+CsjVaSAjUujVb9k2DMsaZw3NlJHT8
cuXReIMZ4n2h6m4cQUKqtlqkbZqzwI1mhnudIKGYrrTrtMA5cDrIq71jFxdK
3bQbYIicAwcFG1ObuLlQvsQJM964OXBCdrPqMzMX+kb99Ugtdw6MKppXWU9y
IkZuzD2ieQ6cH/krTcnnRGZazmkaPPNgz6i8hPVpTiRfrLsUHTIPXq7ae62Y
7kAV0b8DdMIXQFmlh4q6LQcyXMyidr5ZAJEnnfWX73CgOZ17hreSFoCCtBRj
rAEHEtr4udvh4wJgmHHlbFTiQA43q/MTWhbAce3b1/3/siM58cieVc7fYN7u
tVHhE3YUmX1cMu3FbyBzL7/O/vE2ZFX+sozFcRFQDZ/Fvz7GivbwP5w/6LYI
dtx9xeS8lxV1Wp7bc/PlIoiM2KKvR2ZFx3fy+RRHLgItP9+kqqmtiMM+8dKj
4kVQMptuMRe1FSXLwqmutUUwura/W3mRBf2MWBTMfPoHeHMnmdyLYkanLY3t
9T2WgOVjD/OeD4zIa0me/Y/vEuAWlpcQf8OIvjxleBMRsgRMetqfGHsxouMB
cRU/45fA7XCVH0lXGJFCztCOu+VLoN/boM/hHwMSWbib6LSxBMqW3G0OqTGg
FVur5kSHZbBwTYya6bIO01zcZJYfrID40FLr69gyrF2j5LPqrAKRnLCpsOkB
yM1Iqcu48A+gyAHoEDIABu/5dqUobwB+Wq/Ln+Y1MCvDUfSfGAOFxH+rgpa6
jdJ49Z2VgDgjRUH3xwkrY4wyXdwt/oXMRJG94MTMfliQkvDrUGyB4BZKnnhG
VZyqKOXNIQV+A05myj59WHvbXZyyKWNTUrzMTJHb+9PSa4s05X8ARPjP
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-3, 3}, {-16.941708579719684`, 13.006885017752747`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.606110311315509*^9, 3.6061103204533987`*^9}, 
   3.661398207227085*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      SuperscriptBox["x", "3"], "-", "5"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJxF1GtLk3EcgOEddFqWKbpQK3MuC1ke0CJLyTXmqVSYozIxLc9I2VNZ05nC
TDFRcAw12EpFXzgnaqcpyXJTlz1DzWAQiiFOM5k5lDm35ZZW0H7/FzfXN7hp
OffS8kkEAiHlb//MHRBu7O25qByqmo6djLYjj2KyzMdW5NdwtWZ9E5n4xtI1
p0OGyrPS344jrcOnRwvqkI0TuGjaHRngp8M4+yggFsPlBFOdwVvd5vjJICdQ
kcrn0QPJoFZ9XTYTRgKv8qg+EcFEsOyBkyTrFAHsLxMzR+7uKh2yatdVjDw7
mBpmjLtUuQNKijO219qtoNL/qR9RbAYzsGy2ctAETl6wL+tlRrCq1dYnlW6C
nOM3f/mLDCCXzK7+KNCD7ECRt2JwBdRF3BY1iHUgeWpNQ6HPg3SpTtAq0YJR
M+9or5YnwObVAy3TLf1gdVyhR0d4X6xDE/WhMrv6E1gw9FzWy9GC5YTStkc1
8yCLlFvKw3XgDc0Jj7z6FVDdlq/iSfQg83xsYXSRAXwx25P5U7gJjkm2mpJb
jSA2Wj/iXG4CE0uyeWk1ZrCnUsCw3LGCuI0pd0neAT2JTE0v1w4uFTXMdkft
ghsMt/dH6ASmw6mMdsw3iAgahueCxqkksGshsmPQjwy+jDzjc83dCTTHkisY
v5HfDxk7LxMo4GHPOpxqRDado99PMSNds5S+tTtIm8xSbCK5gIvsooNaL2RP
WVKa8CwyZtHt2/5ypJwirWFVIkND2CF8AZLGf1Klr0dSvA0BuBj5JeFzfq0C
mVRS7P5BhRxrpgyZ1Ei57qJr3jRSXDEgYy0gvTqvcPlLyEZ81fb6B7KKGpBC
20BaohXb6VtILCe9TWhBrj0zxeM25P9vgX8AA0VQww==
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-3, 3}, {-16.941708579719684`, 13.006885017752747`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6061103341994753`*^9, 3.661398211153147*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Options", "[", "Plot", "]"}]], "Input",
 CellChangeTimes->{{3.6061105391191983`*^9, 3.6061105424122367`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"AlignmentPoint", "\[Rule]", "Center"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    FractionBox["1", "GoldenRatio"]}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", "None"}], ",", 
   RowBox[{"AxesOrigin", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"AxesStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"Background", "\[Rule]", "None"}], ",", 
   RowBox[{"BaselinePosition", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"ClippingStyle", "\[Rule]", "None"}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", 
   RowBox[{"ColorOutput", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ContentSelectable", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"CoordinatesToolOptions", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"DisplayFunction", "\[RuleDelayed]", "$DisplayFunction"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"Evaluated", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"EvaluationMonitor", "\[Rule]", "None"}], ",", 
   RowBox[{"Exclusions", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ExclusionsStyle", "\[Rule]", "None"}], ",", 
   RowBox[{"Filling", "\[Rule]", "None"}], ",", 
   RowBox[{"FillingStyle", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"FormatType", "\[RuleDelayed]", "TraditionalForm"}], ",", 
   RowBox[{"Frame", "\[Rule]", "False"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", "None"}], ",", 
   RowBox[{"FrameStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"FrameTicksStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"GridLines", "\[Rule]", "None"}], ",", 
   RowBox[{"GridLinesStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"ImageMargins", "\[Rule]", "0.`"}], ",", 
   RowBox[{"ImagePadding", "\[Rule]", "All"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ImageSizeRaw", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"LabelStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"MaxRecursion", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"MeshFunctions", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"#1", "&"}], "}"}]}], ",", 
   RowBox[{"MeshShading", "\[Rule]", "None"}], ",", 
   RowBox[{"MeshStyle", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PerformanceGoal", "\[RuleDelayed]", "$PerformanceGoal"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Full", ",", "Automatic"}], "}"}]}], ",", 
   RowBox[{"PlotRangeClipping", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotRangePadding", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotRegion", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotTheme", "\[RuleDelayed]", "$PlotTheme"}], ",", 
   RowBox[{"PreserveImageOptions", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Prolog", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"RegionFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{"True", "&"}], ")"}]}], ",", 
   RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
   RowBox[{"TargetUnits", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Ticks", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"TicksStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"WorkingPrecision", "\[Rule]", "MachinePrecision"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6061105426684184`*^9, 3.6061105737234545`*^9, 
  3.661398214438675*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{
      SuperscriptBox["x", "3"], "-", "5"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Thick", ",", "Red"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Thin", ",", "Blue", ",", "Dashed"}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6061103600983443`*^9, 3.6061104214136524`*^9}, {
  3.6061105190779524`*^9, 3.606110526181861*^9}, {3.606110606350881*^9, 
  3.6061106313776016`*^9}, {3.606110668955448*^9, 3.606110683198943*^9}},
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[1, 0, 0], Thickness[Large], Opacity[1.], LineBox[CompressedData["
1:eJxF1GtLk3EcgOEddFqWKbpQK3MuC1ke0CJLyTXmqVSYozIxLc9I2VNZ05nC
TDFRcAw12EpFXzgnaqcpyXJTlz1DzWAQiiFOM5k5lDm35ZZW0H7/FzfXN7hp
OffS8kkEAiHlb//MHRBu7O25qByqmo6djLYjj2KyzMdW5NdwtWZ9E5n4xtI1
p0OGyrPS344jrcOnRwvqkI0TuGjaHRngp8M4+yggFsPlBFOdwVvd5vjJICdQ
kcrn0QPJoFZ9XTYTRgKv8qg+EcFEsOyBkyTrFAHsLxMzR+7uKh2yatdVjDw7
mBpmjLtUuQNKijO219qtoNL/qR9RbAYzsGy2ctAETl6wL+tlRrCq1dYnlW6C
nOM3f/mLDCCXzK7+KNCD7ECRt2JwBdRF3BY1iHUgeWpNQ6HPg3SpTtAq0YJR
M+9or5YnwObVAy3TLf1gdVyhR0d4X6xDE/WhMrv6E1gw9FzWy9GC5YTStkc1
8yCLlFvKw3XgDc0Jj7z6FVDdlq/iSfQg83xsYXSRAXwx25P5U7gJjkm2mpJb
jSA2Wj/iXG4CE0uyeWk1ZrCnUsCw3LGCuI0pd0neAT2JTE0v1w4uFTXMdkft
ghsMt/dH6ASmw6mMdsw3iAgahueCxqkksGshsmPQjwy+jDzjc83dCTTHkisY
v5HfDxk7LxMo4GHPOpxqRDado99PMSNds5S+tTtIm8xSbCK5gIvsooNaL2RP
WVKa8CwyZtHt2/5ypJwirWFVIkND2CF8AZLGf1Klr0dSvA0BuBj5JeFzfq0C
mVRS7P5BhRxrpgyZ1Ei57qJr3jRSXDEgYy0gvTqvcPlLyEZ81fb6B7KKGpBC
20BaohXb6VtILCe9TWhBrj0zxeM25P9vgX8AA0VQww==
     "]]}, 
   {RGBColor[0, 0, 1], Thickness[Tiny], Opacity[1.], Dashing[{Small, Small}], 
    LineBox[CompressedData["
1:eJwd13k4VN8fB3BERDHcO7ZvQrKEaCGSOoNUIkqltJCSihIaW0iyJGRfslT2
nVDIknPITmVfkuzr2BMi/O78/prn9bzvfc+5cz733mdEbz3Sv8PEwMAQzcjA
QP+sCTsewXCaCSmpU5qw+f2otfJy+nd5JkStt5AugPvRJXsy/8G9jGhn+ML3
zs/7kIMNc7SRJAOizYTcAPbSKNshilL2cAP6B8YKVJRLInXPKSRj+g92lAUX
pciKI135BU01l1WIfZa+Z4KJoWjzq38m361AowenhB3PiCK4y12QMWoJqq/b
SZqdFEZbA6UxavAS/FlXwiB0VBjpMLZwjPksQYZFqmmPvDDqGhJZb3RagvFg
X7mlgDBaSC3re31jCVIbsJezU7uQxKHVxP2iS5BkmSZ0OWwX8jtlLX8z9Q/M
SHLOzaQJoatWxidgwSJM5ZkHw1k7kcdQ70xA9iK8Hr7b8m3CTpRtcD3yZvIi
XPWJLb4ZuRMxHjOcYQxfhFJNKXHrHjtR6rYLr0/YLsJF9pmzr6/vREvxJ6fq
Di3C5ZMZero7dqLg9n2hbTm/YdiGw5Nk6n+oQeXf0ET6ArwdPeh24aogUlHe
09cfvwAHJKUWdusLolRFnR+dUQtQ8JvOo79agshrf0xTlc8C3JXI7lFyRBCp
S6h+jjNfgLxCRytCBATRJ27ncEPpBSju4DEe9EMAJY6vna5Lm4fZLrfC3psI
oKfha1mpqXOwRihSsdqdH926dVhLOm4ODpt7HMl14Uen5KyHMyLnoK+qYkGc
PT8iVY8KvveZg15e7KQQC36U8Kf5Rf6DOdhh6shQeIEf1V5MNanYPweDa8iZ
jOL8SEIiXfqT9SxM5cinBTbwobnPwiYlt2ahGem8mkQ1Hyq6FBZRdmEWXr3V
gBDiQzqez5irFGfh5tanh1gK+JD1sMGv5r8zsI6pOb4hlg+Vxm8JprnNQGm1
nmc69nzovPCNv7uCpyEFTi1vl+JDg8XPQnrdpqG7ocixnt18yMYgcV+M9TSU
Vzqh/F6IDwW/opkInJ+GMyo1GvcwPtSy5liPkaahZmfC5V2bvEi/KzyazX8K
Sqwz5UV0Eg5qOrbwkgblGvNl0vx40aDsYmeOIw2envfilfLmRTa1fDaP7tPg
Ie0Y/Ux3XhS8aZQ8dZoGE/7byK18wotaHk5zjrHSoGz8i3yF+0TfGfb+Hs9J
WNi3zsl1ihdd2HLieZXbBNxFa2WJ2MqLvh19dT3SZgLGt/GWrTHxojPUjsMP
b09APQGETDfJSH3kHg3XnIAJe9ijNVbI6GDNq4umbBPwjUHPNYVJMiL5dkps
CRiH0l/Mm/u+kVEjj0UDJWYMGkQyJepEk9Fp7Y9J+KsxGGyq9FHxNRlVuq+7
jruMwT7OpdLdYWRUshigEGg8BqWs27PYAsgovePjm77dY3Dc1alqizsZeUdt
PHqaNgofmNwI+GhBRid2B+OlBSNQgetY0gwgIy+jl/raySPwv6Y2XsFjZFQX
9SzwR9gIFD4Z3aylQka62KPtf6kj0DfwPblAgYyuMOswHz40Am9eaXMu30tG
FqMsi+/fD0MTV+aZWJyMgtMdWxNSh2CiZ1aIxTSO2katuA+9HoJ+tt9+CtBw
xCd2T6/ixRDkwFa2No7jKCbaoKHfbAj2h92cPzqMo2S/Q1+ExIegDvXOF60e
HBVbTudFxA1Cf2MFd8F6HA0cNAn2jRqAGWfC0hzTcZTtnmF912cAWkR+uJuc
iqMnbX/OaTwZgPPaOU87knGE2flwrRkOwLgfC+mUBBxpFn3wMxcYgI3BRsmq
MThKA1tfaL3uh2RSv12TP47sAs+ZiXv3w4p7p88feIUj9YEoTUaHfui469SF
MF8c9TyXZy663A+vv8svN/PG0Y7qK25SfP1Qhsa/IPccR4OvDZY5Zftgng7b
7Hk7HDmp0PKrOfrgGw2V5iEqjvCfrtSntF+wO7A4zeExjk4Kp81Pp/+CIbIX
D2RY4Sg9aY3WuPcX1LuRdeKQBY5s8mL7fSR7Yaoma33jTRxtaZys2yrWA0Uo
HZBLF0fUlHq2CeYeeM3/0er2szgafp5+qmH0B9yQvvN4uw6Oqo6YVwWk/4CZ
Xqa8PGdw9CJlAvEf/AH5zmT/UDqJIw738UJptW54H1eXpR3HkbNR7dJ2sW64
u9xbhIPw1JFUxVnmbkiKlJLZdwxHX+fufvhQ2wUR42NH+6M4CjAay1Y91wW7
lPd93KNM/N4qo0m6xp1Q6jyHTd8BHHmQq4f3q3VCyt6v74QJL84liWFinfD6
tpESk/04ak+5E9c52gGb+XnzaXI4iiCPxNy07IA7l+3v8Mri6L/5oRAbl3Zo
X8npXymBI7/GLy0XjdthU6iA7W7C/1ISuJXU2uGalv3u5+I46jW6HbDG3A5X
IqWrT+7B0bvGQR8Pvzb4T9+CNiyKI7HUAbfw6FZoqbrXxUYIRyK+Qt6zT1ph
bkrRxf6dONplaeh/+mortDbgxs4RFlRojlrlb4Wh9QZKiv/hiAehD0bhLTBg
979KsgCOGLvejUgENcNclXLpfWQcbRT30FytmmF9ve5cIU6s7w3fQpdeM2T/
nnj/BOGV2wEbPpzNUO7ZpPktDEdzs0/5Zn2boGzUW908bhxBrtJgyx3f4VWD
4qa3nMT8tx96J9L4Df4hX7moQbggOiOjxecbvPUEXpnYQcy/ZHTlYbZvcMBF
pvMI4bfgydIG01cY5qFyfooDR1EsC0y55Y1w3nXMLYZweMN9rtvPGqHdp18C
uoRfXTaUqllvgGL7pmzy2Yn9f6R8NWClHh5W0bQK3YYjB8UcM7XCerh5aOtz
PcLUNcnHv23r4cktwQMchC1e8Pld/l0HHSzPuHiz4ejqu6XPwjO1MNyP4Vsg
K46Uv38UzRmqhpxBwew9LDgaYvsiV5hcDYUuW5RkEvZXbz5adr8aCqys3HKl
5/nTlxpnq2CLbYuvJD2PkfAZX6uEpB0/154zE30dChGzZZXw0uUigeuEh7g0
EpfcKqF9i4/AYXrublzGzFYJ9bamf5zaQuT3Xy+I4F8gN7cSyZSwf0LypmRn
BSQFYH80CCv3ftwuH1UBf4WIpeyh5+eaJY6JVMDeny73xplwdESJ/ZqhbDlU
FHDkcyQ8bMV/7+Ysgo+f6AkZE/ZPl7C9m4eg1afXPZr0XEgjwFYZwVhbMXsy
YaFtK15iL8tgXJz9QCkjcT8743EHuMpgfJj6rVTCtbP7S0DYZ3ihFHqF0vOO
+7PX4kphqY5VjiU91/LaZi5ZCud8H+dcJyz0OV7MIasEfk2t1dKm5wk9l0OL
iqGdBNtxacK7+Fas40ExRNcrQgQJP/bB/XKqimDaf5YOHPTc+ixqbP4EL/06
MjzDQOzncSjFMlkAe8QY1ksI1+f2qGNWBXBOO9Eth7Cw+Mp10aV8GKHv+CyJ
nnMcCDrGlA/9ky8NBtJz17MZ2t4f4bU6WcoLet/C/SpDzo8w17Ztx1N63h3/
11bwA1wgK848oOc6EPOIzYNX+j6vmdL7YM++YIk8SOktsLxBz5PxW9kHc6Gv
aOQTPXoucMC59FMOfHBMn1OL3vfqbHj98RxYrfzfujrh0LHtYV/DsmGfg/OA
EuF+XvtfH5KzoF2N3+RBwjInBySjCjOh2oCimhxhO1tt62e1GZB1x9ahvYQr
EvOLzbrTYVCQ71dxwpxtwsxnJ9NgWv7FDVHCV7f4nD20lgoF0KzNLsLzJkb9
mztToHBCmxA/YdWg2r2j+5Kh1rajemTC3ujg48bjSXDaKrOYh3DbbExpnl4i
bBcpvEEiLCLMujXyZgJsMJ5Q5CT8QNdaz9U6HoZTmynbCRe69Ly+8zwOMiSv
O7ET3pKlOagdEgtbVP4NsxF+88n4sunpd7Dd8ZojK2EFPoXJ/eZvYEta2uGt
hBtt2VzWfaNhMLetIAvh220/ueqzImHfsvZuZsKrB3Pjw79HwGcJpdpbCAcH
eSreng+DlGuXQpkI750zrJXHQuHoncS/jISRrty1fwrB8Bi7siPdV7KYZmoN
AuGOgLckun/xZTPKzPtBkaNmnxkI72g3kKxUeAmPXRJyoVs1eFPnhoMnlN+j
f5Zuc71Um6USN1g2EyxD9wGB+P3Cm07w49pDMt3+Ib+dzntRYXeQNRvdHf/5
+LP+Zw6XlmWY6BYRvXqmS98AtlOJ0wlntruKPlE7Do7rbWxubmJojeVVVn3R
LbD29eD/Hctmy/Gh3Qq0KV1eo1vDXww903UAIa1/5+kexVqoujWugGE8tZ/u
Sh2Ec8a6g5GShUq6wwP4ZqnXXwD28DsxdN9tsazr4fcFRz4HmNKtTK5OUG/3
B0cdNgXpZsnkhG2ng0DXDo3PG4Qtz6rIskmGgB+V46fp7pi5E3mUJQywDz8t
WScMAoO2PhoKB/vzQnjoTj3w+XF8+WvAa5ev/Y8wqXW8v/1dFPC0szFdI+xI
xXW3PY0BJ1evXF0lPEimlKhefwt2n16W/ks4qUcRVxaKBYPJPa3LhK9mNtSf
3x4HdG+E6i8R5nQxcbNYiyO+733iIuGKs8tKnpPxQH+qpGaBsN2uVzNvuxOA
k/6pojnC0rO7kz7VJgI7mX67GcJ98NO1lsIkwF6Gb9AIhwbq8kwlJwPG8491
JgifNhmuZQlPAeIyPsajhP8deOIq7JkKjoWMKQwRzmEiHT5CTQN4k0B9H2HT
1qQp/dvpwEbq/c6fhAUSjyY80M8AIkOK0l2En2veJcXuzwJBUecefCfc2L3T
b4tCNniQ0iVfT5hs2cJ6V+k9yPG4Gl5JWJ6xUu2OUA5Q0i6MKSN8seHtJu+7
HNCDNYFPhB3CHD/XiuQC22VP51zCb4wvOj2JzwV9nMV66fR5+L1tuTcpD7xS
Fc2KIsxeNvwxQPID8PDgPRBM7/eGNmppH8CH25zgJb1vp+1MYuZHIKztM2VL
OGZUL9NALh+QPJs8LQiX50ibs+Xkg7iiNzE36X2a/SMWHwoAq935w1qE5bhK
EoQUC0Gg/GqeKuEL3WEm3wsKgcip7Fh5et9D7d6DxZ9Aye/SCozepyQRPXy0
CDwp7p5jpq+XkdEw/HMRSFb3cv+zQawvvKDtLyoGeas89W2EL94MCs5QLwEn
rufbfyHsIP3g3I3KEpA5aOGSS7iiTLQR1ZSCW+WRHr7048f8vrz4VgY0nkZI
K9GPz73rduQcBJfKHNVECL9xUge0Zgg4Jh0i2Aj/ZnW+kWKOQMNd/cWOdQyp
xhzoZrcsB48+kgTNCesyCn8ayi4H9tscW3QIm5htjyidLQcLJNZcOcJe+8cu
WlpXgNQo/rbZfxj6XhnT1Ez9AibP5Vy9S3hwr8/79PwvwHh+eEqd8KK/vb/7
0hdA5jjtJ0SY31BfR9GhEmTv2DX6fQ1Dt6ZZa187VYH7rKnZUoSp+n+SrUur
ANo7q/9vlfi+wkHPM+tVQMrvIe0b4Qy3zxr/nlaDYGrolBXhRfJjaPy8BsT6
7u1K+YuhK6z1b4bKagC1yfKaHeGSFRHnu2s1wO7IfJ8G4ec935QfUWvBJzvv
wZ4VDHHFSec9NasDAmHrXpvLGLIJdgtkSqgDGgtSX6sId7h3WXr11QEG61MM
voRjzLxk/K/Ug8lmZTEewtKyg4lvzjQAA/5JHFvCkL/QEXfRFw2AwTHDqekP
huY5A02SvjSAhBVyiR/hT/PHdmWpNgKvC+VFjIQ1CyMjSuW+giRLy0e9vzF0
U/28Tw/Pd3BxfpuH4TzxfDuUes9Y7ztwEmTV3EJYUnzz5JDvd2B2Q6AgYw5D
y+4dbrZMTUBZ/srblVkMlZl5HHdxagK5f49Sns9gSFu2v9DvYTNgG3AP0qcR
93ciR8o332ZwwdVZbHQSQ9lCSuGk9GYge3BJ1YEwD5c/NXS0Gai0nfoXMYGh
rvmjB2KMW0Aqg8mdqjEMmRVGpGecbwV9ufpp7UMY8pG622Jn0wqqzhw4pUk4
O/LwqlpIK2jER1bzBon1ObVrdbW1AseVgXDvAQx5U7AJ5ittgG1P3cmdfcR+
1vlLGhm1g8wjnB8GuzHUpGKkt9e1Hcz8bpA+SHgxY5/94rt2oN2U7+HaRcyr
f2O1z0A7CM0Qa8E6MfRNn92s0LQDCPAwOO5uw9Bcj2ciyaITxDY6i7V/xRB+
9lJjj28nGC30VmEkrFy2ZzE5sxOoFfAxyDRiyC32i8axmU5gl9r20r6euP47
jEP3rbtAoPetY4vVGFKYcRb9Yt8NVO4EnHeExPOcgfrW1qMHrKwfDo3OJq7/
9Bv3lMQeoN6YH+6chaGowOp73ZU9gDs/7e/VTAwViwgcOsbyExRe/9TGlY6h
VUpZDbPXT/Aud+SlYRKGnN3Y5kNe9ALnXvET5tEY8qs70FGV0guaea/0CUcR
88Z9rWS5phckeAilt7zGUGlcluc1tl9A1WNvhXw4htbL9QXFXv4Cxag4uSYQ
Q0+Z3mjk+fSBZ1F3wyw8iXk8Uy01nN4HqL/kShbcMfQueHYHb0Mf6LNK6bN7
Tswbt+hUKUs/CGWl8tu5YuhZ3OMCkZP9YDVt9reeI4ZQOb/2eHU/OC/Hm2z5
AEPqTLep9rUDQDVYO1T9HIaMtrVIOHUOgMTm/hV3XQw5kdS6n44OAB7KOYsK
HQx93CV83It5EITxtz46rIUh8aM9rGGUQWBYtpG7qoYhNuqF6LxPg6Bsx9vZ
+YPEfo5oVEynDgFTjad/XvJgaHIqjzpfOAQsFotP3SNhiHVRVPJP9RCQ0XK5
osGJIQoTg9+/4SHwSCc1Y3YbhnJ3lV7iEB0Ge9C+VhFG4n13WWFCKnIY7HuV
vDY4w4MM6/aQTF+OAAHN5svtNTwou3HEKDNyBKRyvDrCVcWDmJuSsxbTRsC7
CJ+JExU8KKdDStuzfgQwWSSlJJTyoK3Dsl7JHKOAMtOiIZfLgz5uKPwbfzUK
inralGwjeRCngub4w+AxELT2fuqDGQ8yVdqqVBA/BpRuWtmZ3OZBxSo1nht5
Y2DPsOZ99ps86I6allhA6xjA831cdA15UKnuWaMcfByM319kfafNg+7fv9S2
ED4O3EK5+o3keVDl2zvIPnoCmIfHOmn85kZyLIzf09MngKE3mo6a5UavLWJ6
e4smwAQZZ5uhcaMHyq2rGl0TAHu8XebFMDfCWyiKJPIkKANg0KOdG91m2Zme
6j8JOh+HtWcUcCOmBy0h3W40oNVy8nuYLXF+y8P47UE0wMKtrHPDmht1KG/L
BbE0UGRKEhZ5yI3SWSjfkspo4FCxbGmEKTfSf5fFZrNGA9GS3H66F7hRXIu3
C7vtFEi8Ya3eJc+NKEfA3aP3psG38ma2MyMk4v/8izZR+2lwQNg7MaCfhBh6
v6uxeU2DYPYs26YeEkLPbu5sT5gG6S+CsjVaSAjUujVb9k2DMsaZw3NlJHT8
cuXReIMZ4n2h6m4cQUKqtlqkbZqzwI1mhnudIKGYrrTrtMA5cDrIq71jFxdK
3bQbYIicAwcFG1ObuLlQvsQJM964OXBCdrPqMzMX+kb99Ugtdw6MKppXWU9y
IkZuzD2ieQ6cH/krTcnnRGZazmkaPPNgz6i8hPVpTiRfrLsUHTIPXq7ae62Y
7kAV0b8DdMIXQFmlh4q6LQcyXMyidr5ZAJEnnfWX73CgOZ17hreSFoCCtBRj
rAEHEtr4udvh4wJgmHHlbFTiQA43q/MTWhbAce3b1/3/siM58cieVc7fYN7u
tVHhE3YUmX1cMu3FbyBzL7/O/vE2ZFX+sozFcRFQDZ/Fvz7GivbwP5w/6LYI
dtx9xeS8lxV1Wp7bc/PlIoiM2KKvR2ZFx3fy+RRHLgItP9+kqqmtiMM+8dKj
4kVQMptuMRe1FSXLwqmutUUwura/W3mRBf2MWBTMfPoHeHMnmdyLYkanLY3t
9T2WgOVjD/OeD4zIa0me/Y/vEuAWlpcQf8OIvjxleBMRsgRMetqfGHsxouMB
cRU/45fA7XCVH0lXGJFCztCOu+VLoN/boM/hHwMSWbib6LSxBMqW3G0OqTGg
FVur5kSHZbBwTYya6bIO01zcZJYfrID40FLr69gyrF2j5LPqrAKRnLCpsOkB
yM1Iqcu48A+gyAHoEDIABu/5dqUobwB+Wq/Ln+Y1MCvDUfSfGAOFxH+rgpa6
jdJ49Z2VgDgjRUH3xwkrY4wyXdwt/oXMRJG94MTMfliQkvDrUGyB4BZKnnhG
VZyqKOXNIQV+A05myj59WHvbXZyyKWNTUrzMTJHb+9PSa4s05X8ARPjP
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-3, 3}, {-16.941708579719684`, 13.006885017752747`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6061103970564847`*^9, 3.6061104216808224`*^9}, 
   3.6061105271895857`*^9, {3.6061106171650224`*^9, 3.6061106319510098`*^9}, {
   3.606110676227031*^9, 3.606110696303022*^9}, 3.661398216440269*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fig", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{
       SuperscriptBox["x", "3"], "-", "5"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Thick", ",", "Red"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"Thin", ",", "Blue", ",", "Dashed"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"Frame", "\[Rule]", "True"}], ",", 
    RowBox[{"Axes", "\[Rule]", "False"}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.606110698059802*^9, 3.6061107260376244`*^9}, {
  3.606110763241482*^9, 3.606110764094085*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[1, 0, 0], Thickness[Large], Opacity[1.], LineBox[CompressedData["
1:eJxF1GtLk3EcgOEddFqWKbpQK3MuC1ke0CJLyTXmqVSYozIxLc9I2VNZ05nC
TDFRcAw12EpFXzgnaqcpyXJTlz1DzWAQiiFOM5k5lDm35ZZW0H7/FzfXN7hp
OffS8kkEAiHlb//MHRBu7O25qByqmo6djLYjj2KyzMdW5NdwtWZ9E5n4xtI1
p0OGyrPS344jrcOnRwvqkI0TuGjaHRngp8M4+yggFsPlBFOdwVvd5vjJICdQ
kcrn0QPJoFZ9XTYTRgKv8qg+EcFEsOyBkyTrFAHsLxMzR+7uKh2yatdVjDw7
mBpmjLtUuQNKijO219qtoNL/qR9RbAYzsGy2ctAETl6wL+tlRrCq1dYnlW6C
nOM3f/mLDCCXzK7+KNCD7ECRt2JwBdRF3BY1iHUgeWpNQ6HPg3SpTtAq0YJR
M+9or5YnwObVAy3TLf1gdVyhR0d4X6xDE/WhMrv6E1gw9FzWy9GC5YTStkc1
8yCLlFvKw3XgDc0Jj7z6FVDdlq/iSfQg83xsYXSRAXwx25P5U7gJjkm2mpJb
jSA2Wj/iXG4CE0uyeWk1ZrCnUsCw3LGCuI0pd0neAT2JTE0v1w4uFTXMdkft
ghsMt/dH6ASmw6mMdsw3iAgahueCxqkksGshsmPQjwy+jDzjc83dCTTHkisY
v5HfDxk7LxMo4GHPOpxqRDado99PMSNds5S+tTtIm8xSbCK5gIvsooNaL2RP
WVKa8CwyZtHt2/5ypJwirWFVIkND2CF8AZLGf1Klr0dSvA0BuBj5JeFzfq0C
mVRS7P5BhRxrpgyZ1Ei57qJr3jRSXDEgYy0gvTqvcPlLyEZ81fb6B7KKGpBC
20BaohXb6VtILCe9TWhBrj0zxeM25P9vgX8AA0VQww==
     "]]}, 
   {RGBColor[0, 0, 1], Thickness[Tiny], Opacity[1.], Dashing[{Small, Small}], 
    LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"y\"", TraditionalForm], None}, {
     FormBox["\"x\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{-3, 3}, {-16.941708579719684`, 13.006885017752747`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.606110701645874*^9, 3.606110764967716*^9}, 
   3.661398219199642*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<d:\\\\tmp.pdf\>\"", ",", "fig"}], "]"}]], "Input",
 CellChangeTimes->{{3.606110765921399*^9, 3.6061107983019466`*^9}}],

Cell[BoxData["\<\"d:\\\\tmp.pdf\"\>"], "Output",
 CellChangeTimes->{{3.606110786627094*^9, 3.606110799368693*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Animacije", "Subsection",
 CellChangeTimes->{{3.606110821190776*^9, 3.606110823301787*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Krog", "[", 
   RowBox[{"t_", ",", 
    RowBox[{"barva_:", "Red"}]}], "]"}], ":=", 
  RowBox[{"Graphics", "[", 
   RowBox[{"{", 
    RowBox[{"barva", ",", 
     RowBox[{"Opacity", "[", "t", "]"}], ",", 
     RowBox[{"Circle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", "t"}], "}"}], ",", 
       RowBox[{"1", "+", "t"}]}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6061108276283693`*^9, 3.6061109725612116`*^9}, {
  3.606111160654928*^9, 3.606111174379507*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Krog", "[", ".1", "]"}]], "Input",
 CellChangeTimes->{{3.6061108999842663`*^9, 3.606110902045369*^9}, {
  3.606110976104701*^9, 3.606110984586731*^9}, {3.606111170371687*^9, 
  3.6061111764578867`*^9}}],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[1, 0, 0], Opacity[0.1], CircleBox[{0.1, 0.1}, 1.1]}]], "Output",
 CellChangeTimes->{{3.60611090267784*^9, 3.6061109849780345`*^9}, 
   3.6061111768316803`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Slika", "[", "t_", "]"}], ":=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Krog", "[", "t", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Krog", "[", 
       RowBox[{
        RowBox[{"1", "-", "t"}], ",", "Blue"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Krog", "[", 
       RowBox[{"0.5", ",", "Green"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
    ",", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "5"}], "}"}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.606111035836888*^9, 3.6061111265761213`*^9}, {
  3.606111180816519*^9, 3.6061111817692013`*^9}, {3.606111252379819*^9, 
  3.606111338294389*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Slika", "[", "0.25", "]"}]], "Input",
 CellChangeTimes->{{3.606111111467478*^9, 3.6061111135049267`*^9}, {
  3.6061112438407793`*^9, 3.6061112469619675`*^9}}],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[1, 0, 0], Opacity[0.25], CircleBox[{0.25, 0.25}, 1.25]}, 
   {RGBColor[0, 0, 1], Opacity[0.75], CircleBox[{0.75, 0.75}, 1.75]}, 
   {RGBColor[0, 1, 0], Opacity[0.5], CircleBox[{0.5, 0.5}, 1.5]}},
  PlotRange->{{-2, 5}, {-2, 5}}]], "Output",
 CellChangeTimes->{{3.6061111138711853`*^9, 3.606111128947325*^9}, 
   3.6061111830530767`*^9, {3.606111244430167*^9, 3.6061112472811937`*^9}, {
   3.6061112804881516`*^9, 3.606111339794456*^9}, 3.661398235992653*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"Slika", "[", "t", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.606110875269804*^9, 3.606110881785835*^9}, {
  3.6061109895408306`*^9, 3.6061110094199934`*^9}, {3.6061110800491257`*^9, 
  3.6061110873503275`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`t$$ = 0.3765064239501953, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`t$$], 0, 1}}, Typeset`size$$ = {540., {264., 276.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`t$40435$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`t$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`t$$, $CellContext`t$40435$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`Slika[$CellContext`t$$], 
      "Specifications" :> {{$CellContext`t$$, 0, 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{612., {323., 332.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.606110882231135*^9, 3.606110910015707*^9}, 
   3.6061110098062515`*^9, {3.6061110827550516`*^9, 3.6061111356566043`*^9}, 
   3.6061111854607353`*^9, 3.606111285443119*^9, {3.6061113156940665`*^9, 
   3.6061113415862455`*^9}, 3.6613982398086104`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nekateri viri", "Subtitle",
 CellChangeTimes->{{3.606107518725684*^9, 3.6061075205186234`*^9}}],

Cell[TextData[{
 ButtonBox["Hands-on Start to ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/broadcast/screencasts/handsonstart/"], None},
  ButtonNote->"https://www.wolfram.com/broadcast/screencasts/handsonstart/"],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/broadcast/screencasts/handsonstart/"], None},
  ButtonNote->"https://www.wolfram.com/broadcast/screencasts/handsonstart/"],
  FontSlant->"Italic"],
 ButtonBox["\n",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/broadcast/screencasts/handsonstart/"], None},
  ButtonNote->"https://www.wolfram.com/broadcast/screencasts/handsonstart/"],
 "\n",
 ButtonBox["Cheat-sheet for ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.physics.sun.ac.za/~htouchette/archive/mathematicacmds1_2.\
pdf"], None},
  ButtonNote->
   "http://www.physics.sun.ac.za/~htouchette/archive/mathematicacmds1_2.pdf"],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.physics.sun.ac.za/~htouchette/archive/mathematicacmds1_2.\
pdf"], None},
  ButtonNote->
   "http://www.physics.sun.ac.za/~htouchette/archive/mathematicacmds1_2.pdf"],
  FontSlant->"Italic"],
 "\n\n",
 ButtonBox["Kaj vse zmore ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://blog.stephenwolfram.com/2014/03/injecting-computation-\
everywhere-a-sxsw-update/"], None},
  ButtonNote->
   "http://blog.stephenwolfram.com/2014/03/injecting-computation-everywhere-a-\
sxsw-update/"],
 StyleBox[ButtonBox["Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://blog.stephenwolfram.com/2014/03/injecting-computation-\
everywhere-a-sxsw-update/"], None},
  ButtonNote->
   "http://blog.stephenwolfram.com/2014/03/injecting-computation-everywhere-a-\
sxsw-update/"],
  FontSlant->"Italic"],
 ButtonBox[" (predstavitev od avtorja prve verzije S.Wolfram)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://blog.stephenwolfram.com/2014/03/injecting-computation-\
everywhere-a-sxsw-update/"], None},
  ButtonNote->
   "http://blog.stephenwolfram.com/2014/03/injecting-computation-everywhere-a-\
sxsw-update/"]
}], "Text",
 CellChangeTimes->{{3.6061075300266294`*^9, 3.606107545663512*^9}, {
  3.6613983034104753`*^9, 3.6613983034124765`*^9}, {3.6613983711546154`*^9, 
  3.6613983926570654`*^9}, {3.6613985840369377`*^9, 3.6613986475093203`*^9}}],

Cell["", "Text",
 CellChangeTimes->{{3.6066250345581474`*^9, 3.6066250642048893`*^9}, 
   3.6613986134149094`*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1473, 821},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
ShowSelection->True,
Magnification:>1.5 Inherited,
FrontEndVersion->"10.3 for Microsoft Windows (64-bit) (December 10, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info-b521dcfc-9df4-4393-b202-c38112e4badc"->{
  Cell[263398, 5092, 752, 15, 89, "Print",
   CellTags->"Info-b521dcfc-9df4-4393-b202-c38112e4badc"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info-b521dcfc-9df4-4393-b202-c38112e4badc", 507693, 10574}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 41566, 693, 591, "Text"],
Cell[CellGroupData[{
Cell[42148, 717, 249, 4, 136, "Title"],
Cell[42400, 723, 196, 2, 74, "Subtitle"],
Cell[42599, 727, 752, 18, 45, "Text"],
Cell[CellGroupData[{
Cell[43376, 749, 117, 1, 74, "Subtitle"],
Cell[43496, 752, 584, 16, 273, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44117, 773, 164, 2, 74, "Subtitle"],
Cell[CellGroupData[{
Cell[44306, 779, 156, 2, 65, "Subsection"],
Cell[44465, 783, 429, 11, 45, "Text"],
Cell[CellGroupData[{
Cell[44919, 798, 13468, 333, 97, "WolframAlphaShortInput"],
Cell[58390, 1133, 192, 4, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58619, 1142, 97737, 1870, 122, "WolframAlphaShortInput"],
Cell[156359, 3014, 6691, 121, 367, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163087, 3140, 106, 1, 59, "WolframAlphaLong"],
Cell[163196, 3143, 98143, 1872, 1080, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[261388, 5021, 160, 5, 65, "Subsection"],
Cell[261551, 5028, 315, 8, 45, "Text"],
Cell[CellGroupData[{
Cell[261891, 5040, 184, 4, 45, "Input"],
Cell[262078, 5046, 165, 4, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[262292, 5056, 117, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[262434, 5061, 96, 1, 45, "Input"],
Cell[262533, 5064, 152, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[262722, 5071, 360, 8, 45, "Input"],
Cell[263085, 5081, 163, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263285, 5088, 110, 2, 45, "Input"],
Cell[263398, 5092, 752, 15, 89, "Print",
 CellTags->"Info-b521dcfc-9df4-4393-b202-c38112e4badc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264187, 5112, 147, 3, 45, "Input"],
Cell[264337, 5117, 184, 3, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[264570, 5126, 114, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[264709, 5131, 172, 3, 45, "Input"],
Cell[264884, 5136, 213, 4, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[265134, 5145, 530, 13, 104, "Input"],
Cell[265667, 5160, 278, 4, 44, "Output"],
Cell[265948, 5166, 276, 4, 44, "Output"],
Cell[266227, 5172, 258, 5, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266522, 5182, 319, 7, 45, "Input"],
Cell[266844, 5191, 245, 4, 46, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[267150, 5202, 117, 1, 74, "Subtitle"],
Cell[CellGroupData[{
Cell[267292, 5207, 107, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[267424, 5212, 333, 8, 45, "Input"],
Cell[267760, 5222, 144, 2, 44, "Output"]
}, Open  ]],
Cell[267919, 5227, 378, 9, 45, "Input"],
Cell[CellGroupData[{
Cell[268322, 5240, 193, 4, 45, "Input"],
Cell[268518, 5246, 124, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[268679, 5253, 294, 7, 75, "Input"],
Cell[268976, 5262, 96, 1, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269109, 5268, 69, 1, 45, "Input"],
Cell[269181, 5271, 94, 1, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[269324, 5278, 111, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[269460, 5283, 71, 1, 45, "Input"],
Cell[269534, 5286, 92, 1, 44, "Output"]
}, Open  ]],
Cell[269641, 5290, 115, 2, 45, "Input"],
Cell[CellGroupData[{
Cell[269781, 5296, 69, 1, 45, "Input"],
Cell[269853, 5299, 96, 1, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[269998, 5306, 100, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[270123, 5311, 126, 2, 45, "Input"],
Cell[270252, 5315, 99, 1, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270388, 5321, 180, 4, 51, "Input"],
Cell[270571, 5327, 190, 5, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270798, 5337, 212, 5, 51, "Input"],
Cell[271013, 5344, 159, 4, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271209, 5353, 224, 5, 45, "Input"],
Cell[271436, 5360, 127, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271600, 5367, 123, 2, 45, "Input"],
Cell[271726, 5371, 125, 2, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[271900, 5379, 161, 2, 65, "Subsection"],
Cell[CellGroupData[{
Cell[272086, 5385, 303, 8, 51, "Input"],
Cell[272392, 5395, 100, 1, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[272529, 5401, 245, 6, 45, "Input"],
Cell[272777, 5409, 97, 1, 44, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[272935, 5417, 108, 1, 74, "Subtitle"],
Cell[CellGroupData[{
Cell[273068, 5422, 286, 6, 45, "Input"],
Cell[273357, 5430, 105, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273499, 5437, 279, 6, 75, "Input"],
Cell[273781, 5445, 105, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273923, 5452, 155, 2, 45, "Input"],
Cell[274081, 5456, 148, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[274266, 5463, 428, 10, 45, "Input"],
Cell[274697, 5475, 119, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[274853, 5482, 270, 5, 45, "Input"],
Cell[275126, 5489, 119, 2, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[275294, 5497, 107, 1, 74, "Subtitle"],
Cell[275404, 5500, 363, 13, 302, "Text"],
Cell[CellGroupData[{
Cell[275792, 5517, 236, 4, 75, "Input"],
Cell[276031, 5523, 151, 2, 44, "Output"],
Cell[276185, 5527, 148, 2, 44, "Output"]
}, Open  ]],
Cell[276348, 5532, 100, 1, 45, "Text"],
Cell[276451, 5535, 268, 7, 47, "Input"],
Cell[CellGroupData[{
Cell[276744, 5546, 124, 2, 45, "Input"],
Cell[276871, 5550, 120, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277028, 5557, 124, 2, 45, "Input"],
Cell[277155, 5561, 162, 4, 46, "Output"]
}, Open  ]],
Cell[277332, 5568, 108, 1, 45, "Text"],
Cell[277443, 5571, 171, 4, 45, "Input"],
Cell[CellGroupData[{
Cell[277639, 5579, 122, 2, 45, "Input"],
Cell[277764, 5583, 195, 3, 44, "Output"]
}, Open  ]],
Cell[277974, 5589, 220, 4, 45, "Text"],
Cell[278197, 5595, 237, 6, 45, "Input"],
Cell[CellGroupData[{
Cell[278459, 5605, 154, 3, 45, "Input"],
Cell[278616, 5610, 146, 2, 44, "Output"]
}, Open  ]],
Cell[278777, 5615, 102, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[278904, 5620, 122, 2, 45, "Input"],
Cell[279029, 5624, 194, 5, 46, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279260, 5634, 225, 5, 45, "Input"],
Cell[279488, 5641, 294, 6, 46, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279819, 5652, 175, 4, 45, "Input"],
Cell[279997, 5658, 123, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[280157, 5665, 198, 5, 47, "Input"],
Cell[280358, 5672, 119, 2, 46, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[280526, 5680, 93, 1, 74, "Subtitle"],
Cell[280622, 5683, 100, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[280747, 5688, 179, 4, 45, "Input"],
Cell[280929, 5694, 151, 3, 44, "Output"]
}, Open  ]],
Cell[281095, 5700, 161, 3, 75, "Input"],
Cell[CellGroupData[{
Cell[281281, 5707, 232, 6, 45, "Input"],
Cell[281516, 5715, 224, 6, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281777, 5726, 77, 2, 45, "Input"],
Cell[281857, 5730, 126, 2, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282020, 5737, 229, 5, 45, "Input"],
Cell[282252, 5744, 148, 3, 44, "Output"]
}, Open  ]],
Cell[282415, 5750, 98, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[282538, 5755, 268, 7, 45, "Input"],
Cell[282809, 5764, 314, 6, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[283160, 5775, 296, 8, 45, "Input"],
Cell[283459, 5785, 1794, 64, 85, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[285290, 5854, 232, 6, 45, "Input"],
Cell[285525, 5862, 286, 8, 46, "Output"]
}, Open  ]],
Cell[285826, 5873, 151, 2, 45, "Text"],
Cell[CellGroupData[{
Cell[286002, 5879, 321, 9, 45, "Input"],
Cell[286326, 5890, 724, 23, 44, "Output"]
}, Open  ]],
Cell[287065, 5916, 134, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[287224, 5921, 241, 6, 45, "Input"],
Cell[287468, 5929, 420, 13, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[287925, 5947, 133, 2, 45, "Input"],
Cell[288061, 5951, 832, 27, 285, "Output"]
}, Open  ]],
Cell[288908, 5981, 96, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[289029, 5986, 248, 7, 91, "Input"],
Cell[289280, 5995, 324, 9, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289641, 6009, 129, 2, 45, "Input"],
Cell[289773, 6013, 683, 19, 110, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[290493, 6037, 128, 2, 45, "Input"],
Cell[290624, 6041, 189, 9, 204, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[290862, 6056, 127, 1, 74, "Subtitle"],
Cell[CellGroupData[{
Cell[291014, 6061, 115, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[291154, 6066, 153, 3, 45, "Input"],
Cell[291310, 6071, 164, 4, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[291511, 6080, 462, 11, 45, "Input"],
Cell[291976, 6093, 413, 9, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[292426, 6107, 359, 9, 45, "Input"],
Cell[292788, 6118, 200, 3, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[293025, 6126, 426, 12, 45, "Input"],
Cell[293454, 6140, 254, 7, 46, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293757, 6153, 109, 1, 65, "Subsection"],
Cell[293869, 6156, 433, 14, 45, "Input"],
Cell[CellGroupData[{
Cell[294327, 6174, 239, 6, 45, "Input"],
Cell[294569, 6182, 2730, 58, 345, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[297360, 6247, 118, 1, 74, "Subtitle"],
Cell[CellGroupData[{
Cell[297503, 6252, 114, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[297642, 6257, 198, 5, 51, "Input"],
Cell[297843, 6264, 256, 6, 46, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298136, 6275, 129, 2, 45, "Input"],
Cell[298268, 6279, 210, 5, 46, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298515, 6289, 253, 9, 45, "Input"],
Cell[298771, 6300, 718, 25, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299526, 6330, 366, 11, 45, "Input"],
Cell[299895, 6343, 194, 5, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[300126, 6353, 293, 8, 51, "Input"],
Cell[300422, 6363, 641, 21, 65, "Output"]
}, Open  ]],
Cell[301078, 6387, 158, 2, 45, "Text"],
Cell[CellGroupData[{
Cell[301261, 6393, 122, 2, 45, "Input"],
Cell[301386, 6397, 463, 16, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301886, 6418, 169, 4, 45, "Input"],
Cell[302058, 6424, 247, 8, 65, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[302354, 6438, 111, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[302490, 6443, 424, 12, 75, "Input"],
Cell[302917, 6457, 5812, 107, 357, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[308766, 6569, 323, 9, 45, "Input"],
Cell[309092, 6580, 237, 6, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[309378, 6592, 118, 1, 65, "Subsection"],
Cell[309499, 6595, 115, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[309639, 6600, 677, 16, 45, "Input"],
Cell[310319, 6618, 1423, 44, 81, "Output"]
}, Open  ]],
Cell[311757, 6665, 109, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[311891, 6670, 1037, 28, 75, "Input"],
Cell[312931, 6700, 1927, 58, 154, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314895, 6763, 284, 8, 45, "Input"],
Cell[315182, 6773, 1555, 51, 154, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[316774, 6829, 160, 3, 45, "Input"],
Cell[316937, 6834, 958, 31, 82, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317932, 6870, 326, 9, 45, "Input"],
Cell[318261, 6881, 43323, 721, 342, "Output"]
}, Open  ]],
Cell[361599, 7605, 121, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[361745, 7610, 307, 8, 45, "Input"],
Cell[362055, 7620, 1301, 21, 65, "Message"],
Cell[363359, 7643, 9256, 184, 107, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[372652, 7832, 274, 7, 45, "Input"],
Cell[372929, 7841, 698, 21, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[373664, 7867, 342, 9, 45, "Input"],
Cell[374009, 7878, 11548, 223, 107, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[385594, 8106, 261, 8, 45, "Input"],
Cell[385858, 8116, 11167, 218, 107, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397062, 8339, 174, 3, 45, "Input"],
Cell[397239, 8344, 164, 3, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397440, 8352, 414, 12, 45, "Input"],
Cell[397857, 8366, 42727, 713, 342, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[440645, 9086, 121, 1, 74, "Subtitle"],
Cell[440769, 9089, 88, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[440882, 9094, 225, 5, 45, "Input"],
Cell[441110, 9101, 176, 4, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[441323, 9110, 131, 2, 45, "Input"],
Cell[441457, 9114, 708, 21, 110, "Output"]
}, Open  ]],
Cell[442180, 9138, 165, 3, 45, "Text"],
Cell[CellGroupData[{
Cell[442370, 9145, 476, 10, 91, "Input"],
Cell[442849, 9157, 428, 11, 44, "Output"]
}, Open  ]],
Cell[443292, 9171, 120, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[443437, 9176, 168, 3, 45, "Input"],
Cell[443608, 9181, 401, 10, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[444046, 9196, 133, 2, 45, "Input"],
Cell[444182, 9200, 897, 27, 110, "Output"]
}, Open  ]],
Cell[445094, 9230, 101, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[445220, 9235, 204, 4, 45, "Input"],
Cell[445427, 9241, 247, 5, 44, "Output"]
}, Open  ]],
Cell[445689, 9249, 104, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[445818, 9254, 154, 3, 45, "Input"],
Cell[445975, 9259, 719, 18, 63, "Output"]
}, Open  ]],
Cell[446709, 9280, 102, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[446836, 9285, 218, 4, 45, "Input"],
Cell[447057, 9291, 740, 21, 110, "Output"]
}, Open  ]],
Cell[447812, 9315, 90, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[447927, 9320, 161, 3, 45, "Input"],
Cell[448091, 9325, 909, 26, 146, "Output"]
}, Open  ]],
Cell[449015, 9354, 110, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[449150, 9359, 213, 5, 45, "Input"],
Cell[449366, 9366, 476, 14, 44, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449879, 9385, 100, 1, 45, "Input"],
Cell[449982, 9388, 149, 3, 44, "Output"]
}, Open  ]],
Cell[450146, 9394, 98, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[450269, 9399, 124, 2, 45, "Input"],
Cell[450396, 9403, 119, 2, 46, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[450564, 9411, 111, 1, 74, "Subtitle"],
Cell[CellGroupData[{
Cell[450700, 9416, 94, 1, 65, "Subsection"],
Cell[CellGroupData[{
Cell[450819, 9421, 329, 10, 51, "Input"],
Cell[451151, 9433, 10403, 183, 357, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[461591, 9621, 263, 9, 51, "Input"],
Cell[461857, 9632, 10375, 182, 357, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[472269, 9819, 133, 2, 45, "Input"],
Cell[472405, 9823, 3873, 81, 446, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[476315, 9909, 741, 21, 51, "Input"],
Cell[477059, 9932, 10494, 183, 357, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487590, 10120, 871, 24, 84, "Input"],
Cell[488464, 10146, 10434, 184, 368, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[498935, 10335, 172, 3, 45, "Input"],
Cell[499110, 10340, 114, 1, 44, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[499273, 10347, 97, 1, 65, "Subsection"],
Cell[499373, 10350, 536, 15, 45, "Input"],
Cell[CellGroupData[{
Cell[499934, 10369, 226, 4, 45, "Input"],
Cell[500163, 10375, 199, 4, 561, "Output"]
}, Open  ]],
Cell[500377, 10382, 926, 26, 162, "Input"],
Cell[CellGroupData[{
Cell[501328, 10412, 182, 3, 45, "Input"],
Cell[501513, 10417, 500, 8, 562, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[502050, 10430, 347, 8, 45, "Input"],
Cell[502400, 10440, 2147, 42, 679, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[504608, 10489, 101, 1, 74, "Subtitle"],
Cell[504712, 10492, 2455, 62, 159, "Text"],
Cell[507170, 10556, 114, 2, 45, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
